--
-- PostgreSQL database dump
--

-- Dumped from database version 11.4
-- Dumped by pg_dump version 11.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: obanalytics; Type: SCHEMA; Schema: -; Owner: ob-analytics
--

CREATE SCHEMA obanalytics;


ALTER SCHEMA obanalytics OWNER TO "ob-analytics";

--
-- Name: draw_interim_price; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.draw_interim_price AS (
	microtimestamp timestamp with time zone,
	price numeric
);


ALTER TYPE obanalytics.draw_interim_price OWNER TO "ob-analytics";

--
-- Name: level2_depth_record; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.level2_depth_record AS (
	price numeric,
	volume numeric,
	side character(1),
	bps_level integer
);


ALTER TYPE obanalytics.level2_depth_record OWNER TO "ob-analytics";

--
-- Name: level2_depth_summary_internal_state; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.level2_depth_summary_internal_state AS (
	full_depth obanalytics.level2_depth_record[],
	bps_step integer,
	max_bps_level integer,
	pair_id smallint
);


ALTER TYPE obanalytics.level2_depth_summary_internal_state OWNER TO "ob-analytics";

--
-- Name: level2_depth_summary_record; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.level2_depth_summary_record AS (
	price numeric,
	volume numeric,
	side character(1),
	bps_level integer
);


ALTER TYPE obanalytics.level2_depth_summary_record OWNER TO "ob-analytics";

--
-- Name: oba_draw_type; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.oba_draw_type AS ENUM (
    'bid',
    'ask',
    'mid-price'
);


ALTER TYPE obanalytics.oba_draw_type OWNER TO "ob-analytics";

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: level3; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint NOT NULL,
    exchange_id smallint NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (exchange_id);


ALTER TABLE obanalytics.level3 OWNER TO "ob-analytics";

--
-- Name: COLUMN level3.exchange_microtimestamp; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON COLUMN obanalytics.level3.exchange_microtimestamp IS 'An microtimestamp of an event as asigned by an exchange. Not null if different from ''microtimestamp''';


--
-- Name: pair_of_ob; Type: TYPE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TYPE obanalytics.pair_of_ob AS (
	ob1 obanalytics.level3[],
	ob2 obanalytics.level3[]
);


ALTER TYPE obanalytics.pair_of_ob OWNER TO "ob-analytics";

--
-- Name: matches; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint NOT NULL,
    pair_id smallint NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY LIST (exchange_id);


ALTER TABLE obanalytics.matches OWNER TO "ob-analytics";

--
-- Name: COLUMN matches.exchange_side; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON COLUMN obanalytics.matches.exchange_side IS 'Type of trade as reported by an exchange. Not null if different from ''trade_type''';


--
-- Name: _create_level1_partition(text, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._create_level1_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	v_from timestamptz;
	v_to timestamptz;
	
	v_parent_table text;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	v_from := make_timestamptz(p_year, p_month, 1, 0, 0, 0);	-- will use the current timezone 
	v_to := v_from + '1 month'::interval;
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	
	v_parent_table := 'level1';
	v_table_name := v_parent_table || '_' || p_exchange;

	i = 1;
	v_statements[i] := 'create table if not exists ' || V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_exchange_id || ') partition by list ( pair_id )' ;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_pair);
	
	i := i + 1;
	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_pair_id || ') partition by range (microtimestamp)';
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	v_parent_table := v_table_name;
	-- We need a shorter name for the leafs - we are confined by max_identifier_length 
	v_table_name :=  'level1_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || p_year || lpad(p_month::text, 2, '0') ;
	i := i + 1;
	
	v_statements[i] := 'create table if not exists '||V_SCHEMA ||v_table_name||' partition of '||V_SCHEMA ||v_parent_table||
							' for values from ('||quote_literal(v_from::timestamptz)||') to (' ||quote_literal(v_to::timestamptz) || ')';
							
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column microtimestamp set statistics 1000 ';

	v_statement := 	'alter table '|| V_SCHEMA || v_table_name || ' add constraint '  || v_table_name ;
	
	i := i + 1;
	v_statements[i] := v_statement || '_pkey primary key (microtimestamp) ';  
	
	i := i+1;
	v_statements[i] := 'alter table '|| V_SCHEMA || v_table_name || ' set ( autovacuum_vacuum_scale_factor= 0.0 , autovacuum_vacuum_threshold = 10000)';
	
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._create_level1_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _create_level2_partition(text, text, character, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._create_level2_partition(p_exchange text, p_pair text, p_precision character, p_year integer, p_month integer, p_execute boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	v_from timestamptz;
	v_to timestamptz;
	
	v_parent_table text;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	if not lower(p_precision) in ('r0', 'p0', 'p1', 'p2', 'p3', 'p4') then 
		raise exception 'Invalid p_precision: %. Valid values are r0, p0, p1, p2, p3, p4', p_precision;
	end if;
	v_from := make_timestamptz(p_year, p_month, 1, 0, 0, 0);	-- will use the current timezone 
	v_to := v_from + '1 month'::interval;
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	
	v_parent_table := 'level2';
	v_table_name := v_parent_table || '_' || p_exchange;

	i = 1;
	v_statements[i] := 'create table if not exists ' || V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_exchange_id || ') partition by list ( pair_id )' ;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_pair);
	
	i := i + 1;
	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_pair_id || ') partition by list (precision)';
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_precision);
	i := i + 1;
	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| quote_literal(p_precision) || ') partition by range (microtimestamp)';
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column precision set default ' || quote_literal(p_precision);

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column microtimestamp set statistics 1000 ';

	v_parent_table := v_table_name;
	-- We need a shorter name for the leafs - we are confined by max_identifier_length 
	v_table_name :=  'level2_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0')|| p_precision || p_year || lpad(p_month::text, 2, '0') ;
	i := i + 1;
	
	v_statements[i] := 'create table if not exists '||V_SCHEMA ||v_table_name||' partition of '||V_SCHEMA ||v_parent_table||
							' for values from ('||quote_literal(v_from::timestamptz)||') to (' ||quote_literal(v_to::timestamptz) || ')';
							
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column precision set default ' || quote_literal(p_precision);

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	v_statement := 	'alter table '|| V_SCHEMA || v_table_name || ' add constraint '  || v_table_name ;
	
	i := i + 1;
	v_statements[i] := v_statement || '_pkey primary key (microtimestamp) ';  
	
	i := i+1;
	v_statements[i] := 'alter table '|| V_SCHEMA || v_table_name || ' set ( autovacuum_vacuum_scale_factor= 0.0 , autovacuum_vacuum_threshold = 10000)';
	
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._create_level2_partition(p_exchange text, p_pair text, p_precision character, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _create_level3_partition(text, character, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._create_level3_partition(p_exchange text, p_side character, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	v_from timestamptz;
	v_to timestamptz;
	
	v_parent_table text;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	if not lower(p_side) in ('b', 's') then 
		raise exception 'Invalid p_side: % ', p_side;
	end if;
	v_from := make_timestamptz(p_year, p_month, 1, 0, 0, 0);	-- will use the current timezone 
	v_to := v_from + '1 month'::interval;
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	
	v_parent_table := 'level3';
	v_table_name := v_parent_table || '_' || p_exchange;

	i = 1;
	v_statements[i] := 'create table if not exists ' || V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_exchange_id || ') partition by list ( pair_id )' ;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_pair);
	
	i := i + 1;
	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_pair_id || ') partition by list (side)';
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column microtimestamp set statistics 1000 ';

	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_side);
	i := i + 1;
	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| quote_literal(p_side) || ') partition by range (microtimestamp)';
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column side set default ' || quote_literal(p_side);
	
	

	v_parent_table := v_table_name;
	-- We need a shorter name for the leafs - we are confined by max_identifier_length 
	v_table_name :=  'level3_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0')|| p_side || p_year || lpad(p_month::text, 2, '0') ;
	i := i + 1;
	
	v_statements[i] := 'create table if not exists '||V_SCHEMA ||v_table_name||' partition of '||V_SCHEMA ||v_parent_table||
							' for values from ('||quote_literal(v_from::timestamptz)||') to (' ||quote_literal(v_to::timestamptz) || ')';
							
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column side set default ' || quote_literal(p_side);

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	v_statement := 	'alter table '|| V_SCHEMA || v_table_name || ' add constraint '  || v_table_name ;
	
	i := i + 1;
	v_statements[i] := v_statement || '_pkey primary key (microtimestamp, order_id, event_no) ';  
	
	i := i + 1;
	v_statements[i] := v_statement || '_fkey_level3_next foreign key (next_microtimestamp, order_id, next_event_no) references '||V_SCHEMA ||v_table_name ||
							' match simple on update cascade on delete no action deferrable initially deferred';
	i := i + 1;
	v_statements[i] := v_statement || '_fkey_level3_price foreign key (price_microtimestamp, order_id, price_event_no) references '||V_SCHEMA ||v_table_name ||
							' match simple on update cascade on delete no action deferrable initially deferred';

	i := i+1;
	v_statements[i] := v_statement || '_unique_next unique (next_microtimestamp, order_id, next_event_no) deferrable initially deferred';
	
	i := i+1;
	v_statements[i] := 'alter table '|| V_SCHEMA || v_table_name || ' set ( autovacuum_vacuum_scale_factor= 0.0 , autovacuum_vacuum_threshold = 10000)';
	
	i := i+1;
	v_statements[i] := 'create trigger '||v_table_name||'_ba_incorporate_new_event before insert on '||V_SCHEMA||v_table_name||
		' for each row execute procedure obanalytics.level3_incorporate_new_event()';

	i := i+1;
	v_statements[i] := 'create trigger '||v_table_name||'_bz_save_exchange_microtimestamp before update of microtimestamp on '||V_SCHEMA||v_table_name||
		' for each row execute procedure obanalytics.save_exchange_microtimestamp()';

	
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._create_level3_partition(p_exchange text, p_side character, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _create_matches_partition(text, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._create_matches_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	v_from timestamptz;
	v_to timestamptz;
	
	v_parent_table text;
	v_buy_orders_table text;
	v_sell_orders_table text;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	v_from := make_timestamptz(p_year, p_month, 1, 0, 0, 0);	-- will use the current timezone 
	v_to := v_from + '1 month'::interval;
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	
	v_parent_table := 'matches';
	v_table_name := v_parent_table || '_' || p_exchange;
	i = 1;
	
	v_statements[i] := 'create table if not exists ' || V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_exchange_id || ') partition by list (pair_id)' ;
						
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	
	v_parent_table := v_table_name;
	v_table_name := v_parent_table || '_' || lower(p_pair);
	i := i + 1;

	v_statements[i] := 'create table if not exists '||V_SCHEMA || v_table_name || ' partition of '|| V_SCHEMA ||v_parent_table||
						' for values in ('|| v_pair_id || ') partition by range (microtimestamp)';

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;

	v_parent_table := v_table_name;
	-- We need a shorter name for the leafs - we are confined by max_identifier_length 
	v_table_name :=  'matches_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || p_year || lpad(p_month::text, 2, '0') ;
	i := i + 1;
	
	v_statements[i] := 'create table if not exists '||V_SCHEMA ||v_table_name||' partition of '||V_SCHEMA ||v_parent_table||
							' for values from ('||quote_literal(v_from::timestamptz)||') to (' ||quote_literal(v_to::timestamptz) || ')';
							
							
	i := i + 1;
	v_statements[i] := 'create trigger '||v_table_name||'_bz_save_exchange_microtimestamp before update of microtimestamp on '||V_SCHEMA||v_table_name||
		' for each row execute procedure obanalytics.save_exchange_microtimestamp()';
	
	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column exchange_id set default ' || v_exchange_id;

	i := i+1;
	v_statements[i] := 'alter table ' || V_SCHEMA || v_table_name || ' alter column pair_id set default ' || v_pair_id;
	
	v_statement := 	'alter table '|| V_SCHEMA || v_table_name || ' add constraint '  || v_table_name ;

	i := i+1;
	v_statements[i] := v_statement || '_unique_order_ids_combination unique (buy_order_id, sell_order_id) ';
	
	v_buy_orders_table :=  'level3_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || 'b' ||  p_year || lpad(p_month::text, 2, '0') ;	
	v_sell_orders_table :=  'level3_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || 's' ||  p_year || lpad(p_month::text, 2, '0') ;	

	i := i + 1;
	v_statements[i] := v_statement || '_fkey_level3_buys  foreign key (buy_event_no, microtimestamp, buy_order_id) references '||V_SCHEMA ||v_buy_orders_table ||
							'(event_no, microtimestamp, order_id) match simple on update cascade on delete no action deferrable initially deferred';
							
	i := i + 1;
	v_statements[i] := v_statement || '_fkey_level3_sells  foreign key (sell_event_no, microtimestamp, sell_order_id) references '||V_SCHEMA ||v_sell_orders_table ||
							'(event_no, microtimestamp, order_id) match simple on update cascade on delete no action deferrable initially deferred';

	i := i+1;
	v_statements[i] := 'alter table '|| V_SCHEMA || v_table_name || ' set ( autovacuum_vacuum_scale_factor= 0.0 , autovacuum_vacuum_threshold = 10000)';
	

	foreach v_statement in array v_statements loop
		raise debug '%', v_statement;
		if p_execute then 
			execute v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._create_matches_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _create_or_extend_draw(obanalytics.draw_interim_price[], timestamp with time zone, numeric, numeric); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._create_or_extend_draw(p_draw obanalytics.draw_interim_price[], p_microtimestamp timestamp with time zone, p_price numeric, p_minimal_draw numeric) RETURNS obanalytics.draw_interim_price[]
    LANGUAGE plpgsql
    AS $$
declare 
	ONE_BPS constant numeric := 0.0001;	-- one BASIS POINT (see https://www.investopedia.com/ask/answers/what-basis-point-bps/)
begin 
	p_minimal_draw := p_minimal_draw*ONE_BPS;
	if p_draw is null then	
		-- p_draw[1] - the current draw start
		-- p_draw[2] - the latest turning point (see below)
		-- p_draw[3] - the current draw end
		p_draw := array[row(p_microtimestamp, p_price), row(p_microtimestamp, p_price), row(p_microtimestamp,  p_price)];
	else
		-- The turning point helps us to decide whether the current draw is to be extended or a new draw is to be started
		if p_draw[2].price = p_price then 										-- extend the draw, keep the turning point
			p_draw[3] := row(p_microtimestamp, p_price);
		else
			if ( (p_draw[2].price >= p_draw[1].price and p_price > p_draw[2].price) or 	-- extend the draw, set the new turning point
			    (p_draw[2].price <= p_draw[1].price and p_price < p_draw[2].price) 	)  then 
					p_draw[2] := row(p_microtimestamp, p_price);
					p_draw[3] := row(p_microtimestamp, p_price);
			else	-- check whether the current draw ended and new draw is to be started
				if abs(p_draw[2].price - p_draw[1].price)>= p_draw[1].price*p_minimal_draw then -- the current draw has exceeded the minimal draw so check the turning (next) draw  ...
					if abs(p_price - p_draw[2].price)>= p_draw[2].price*p_minimal_draw then -- the turn after the curent draw exceeded  the minmal draw too so start new draw FROM THE TURNING POINT (i.e. in the past)
						p_draw := array[p_draw[2], row(p_microtimestamp, p_price)::obanalytics.draw_interim_price, row(p_microtimestamp, p_price)::obanalytics.draw_interim_price];
					else	-- not yet, extend the turning draw from the turning point
						p_draw[3] := row(p_microtimestamp, p_price);
					end if;
				else
					p_draw[2] := row(p_microtimestamp, p_price);
					p_draw[3] := row(p_microtimestamp, p_price);
				end if;
			end if;
		end if;
	end if;
	return p_draw;
end;
$$;


ALTER FUNCTION obanalytics._create_or_extend_draw(p_draw obanalytics.draw_interim_price[], p_microtimestamp timestamp with time zone, p_price numeric, p_minimal_draw numeric) OWNER TO "ob-analytics";

--
-- Name: _depth_after_depth_change(obanalytics.level2_depth_record[], obanalytics.level2_depth_record[], timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_after_depth_change(p_depth obanalytics.level2_depth_record[], p_depth_change obanalytics.level2_depth_record[], p_microtimestamp timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS obanalytics.level2_depth_record[]
    LANGUAGE plpgsql
    AS $$
begin 
	
	if p_depth is null then
		p_depth := array(	select row(price,  
											sum(amount),
									   		side,
									   		null
										 )::obanalytics.level2_depth_record
								 from obanalytics.order_book( p_microtimestamp, p_pair_id, p_exchange_id,
															p_only_makers := true,p_before := true) join unnest(ob) on true
								 group by ts, price, side
					  );
	end if;
	return array(  select row(price, volume, side, null)::obanalytics.level2_depth_record
					from (
						select coalesce(d.price, c.price) as price, coalesce(c.volume, d.volume) as volume, coalesce(d.side, c.side) as side
						from unnest(p_depth) d full join unnest(p_depth_change) c using (price, side)
					) a
					where volume <> 0
				 	order by price desc
				);
end;
$$;


ALTER FUNCTION obanalytics._depth_after_depth_change(p_depth obanalytics.level2_depth_record[], p_depth_change obanalytics.level2_depth_record[], p_microtimestamp timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: _depth_change(obanalytics.pair_of_ob); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_change(p_obs obanalytics.pair_of_ob) RETURNS obanalytics.level2_depth_record[]
    LANGUAGE sql
    AS $$
select * from obanalytics._depth_change(
	coalesce(p_obs.ob1,
			 coalesce ( (   select ob 
							from obanalytics.order_book( ( select max(microtimestamp) from unnest(p_obs.ob2)),	-- ob's ts is max(microtimestamp), see order_book() code
														  ( select pair_id from unnest(p_obs.ob2) limit 1),
														  ( select exchange_id from unnest(p_obs.ob2) limit 1),
														  p_only_makers := true,
														  p_before := true,	-- we need ob BEFORE here
														  p_check_takers := true))),
			 			p_obs.ob2 ),
			  p_obs.ob2);

$$;


ALTER FUNCTION obanalytics._depth_change(p_obs obanalytics.pair_of_ob) OWNER TO "ob-analytics";

--
-- Name: _depth_change(obanalytics.level3[], obanalytics.level3[]); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_change(p_ob_before obanalytics.level3[], p_ob_after obanalytics.level3[]) RETURNS obanalytics.level2_depth_record[]
    LANGUAGE sql
    AS $$

select array_agg(row(price, coalesce(af.amount, 0), side, null::integer)::obanalytics.level2_depth_record  order by price desc)
from (
	select a.price, sum(a.amount) as amount,a.side
	from unnest(p_ob_before) a 
	where a.is_maker 
	group by a.price, a.side, a.pair_id
) bf full join (
	select a.price, sum(a.amount) as amount, a.side
	from unnest(p_ob_after) a 
	where a.is_maker 
	group by a.price, a.side, a.pair_id
) af using (price, side)
where bf.amount is distinct from af.amount
	

$$;


ALTER FUNCTION obanalytics._depth_change(p_ob_before obanalytics.level3[], p_ob_after obanalytics.level3[]) OWNER TO "ob-analytics";

--
-- Name: _depth_change_sfunc(obanalytics.pair_of_ob, obanalytics.level3[]); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_change_sfunc(p_obs obanalytics.pair_of_ob, p_ob obanalytics.level3[]) RETURNS obanalytics.pair_of_ob
    LANGUAGE sql STABLE
    AS $$
	select (p_obs.ob2, p_ob)::obanalytics.pair_of_ob;

$$;


ALTER FUNCTION obanalytics._depth_change_sfunc(p_obs obanalytics.pair_of_ob, p_ob obanalytics.level3[]) OWNER TO "ob-analytics";

--
-- Name: _depth_summary(obanalytics.level2_depth_summary_internal_state); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_summary(p_depth obanalytics.level2_depth_summary_internal_state) RETURNS obanalytics.level2_depth_record[]
    LANGUAGE sql STABLE
    AS $$

with depth as (
	select price, volume, side
	from unnest(p_depth.full_depth) d
),	
depth_with_best_prices as (
	select min(price) filter(where side = 's') over () as best_ask_price, 
			max(price) filter(where side = 'b') over () as best_bid_price, 
			price,
			volume as amount,
			side
	from depth
),
depth_with_bps_levels as (
	select amount, 
			price,
			side,
			case side
				when 's' then ceiling((price-best_ask_price)/best_ask_price/p_depth.bps_step*10000)::numeric	
				when 'b' then ceiling((best_bid_price-price)/best_bid_price/p_depth.bps_step*10000)::numeric	
			end*p_depth.bps_step as bps_level,
			best_ask_price,
			best_bid_price
	from depth_with_best_prices
),
depth_with_price_adjusted as (
	select amount,
			case side
				when 's' then round(best_ask_price*(1 + bps_level/10000), (select "R0" from obanalytics.pairs where pair_id = p_depth.pair_id)) 
				when 'b' then round(best_bid_price*(1 - bps_level/10000), (select "R0" from obanalytics.pairs where pair_id = p_depth.pair_id)) 
			end as price,
			side,
			bps_level
	from depth_with_bps_levels 
	where bps_level <= p_depth.max_bps_level
),
depth_summary as (
	select price, 
			sum(amount), 
			side, 
			bps_level::bigint
	from depth_with_price_adjusted
	group by 1, 3, 4
)
select array_agg(depth_summary::obanalytics.level2_depth_record)
from depth_summary

$$;


ALTER FUNCTION obanalytics._depth_summary(p_depth obanalytics.level2_depth_summary_internal_state) OWNER TO "ob-analytics";

--
-- Name: _depth_summary_after_depth_change(obanalytics.level2_depth_summary_internal_state, obanalytics.level2_depth_record[], timestamp with time zone, integer, integer, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._depth_summary_after_depth_change(p_internal_state obanalytics.level2_depth_summary_internal_state, p_depth_change obanalytics.level2_depth_record[], p_microtimestamp timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_bps_step integer, p_max_bps_level integer) RETURNS obanalytics.level2_depth_summary_internal_state
    LANGUAGE sql STABLE
    AS $$
select obanalytics._depth_after_depth_change(p_internal_state.full_depth, p_depth_change, p_microtimestamp, p_pair_id, p_exchange_id),
		p_bps_step, 
		p_max_bps_level,
		p_pair_id::smallint;
$$;


ALTER FUNCTION obanalytics._depth_summary_after_depth_change(p_internal_state obanalytics.level2_depth_summary_internal_state, p_depth_change obanalytics.level2_depth_record[], p_microtimestamp timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_bps_step integer, p_max_bps_level integer) OWNER TO "ob-analytics";

--
-- Name: _drop_leaf_level1_partition(text, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._drop_leaf_level1_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	v_table_name :=  'level1_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || p_year || lpad(p_month::text, 2, '0') ;
	i := 1;
	
	v_statements[i] := 'drop table if exists '||V_SCHEMA ||v_table_name;
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._drop_leaf_level1_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _drop_leaf_level2_partition(text, text, character, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._drop_leaf_level2_partition(p_exchange text, p_pair text, p_precision character, p_year integer, p_month integer, p_execute boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	if not lower(p_precision) in ('r0', 'p0', 'p1', 'p2', 'p3', 'p4') then 
		raise exception 'Invalid p_precision: %. Valid values are r0, p1, p2, p3, p4', p_precision;
	end if;

	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	v_table_name :=  'level2_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0')|| p_precision || p_year || lpad(p_month::text, 2, '0') ;
	i := 1;
	
	v_statements[i] := 'drop table if exists '||V_SCHEMA ||v_table_name;
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._drop_leaf_level2_partition(p_exchange text, p_pair text, p_precision character, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _drop_leaf_level3_partition(text, character, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._drop_leaf_level3_partition(p_exchange text, p_side character, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	if not lower(p_side) in ('b', 's') then 
		raise exception 'Invalid p_side: % ', p_side;
	end if;
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);

	v_table_name :=  'level3_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0')|| p_side || p_year || lpad(p_month::text, 2, '0') ;
	i := 1;
	
	v_statements[i] := 'drop table if exists '||V_SCHEMA ||v_table_name;
							
	foreach v_statement in array v_statements loop
		if p_execute then 
			raise log '%', v_statement;
			execute v_statement;
		else
			raise debug '%', v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._drop_leaf_level3_partition(p_exchange text, p_side character, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _drop_leaf_matches_partition(text, text, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._drop_leaf_matches_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

declare
	i integer;
	v_exchange_id smallint;
	v_pair_id smallint;
	
	
	v_table_name text;
	v_statement text;
	v_statements text[];
	V_SCHEMA constant text default 'obanalytics.';
begin 

	select pair_id into strict v_pair_id
	from obanalytics.pairs
	where pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchange = lower(p_exchange);
	
	v_table_name :=  'matches_' || lpad(v_exchange_id::text, 2,'0') || lpad(v_pair_id::text, 3,'0') || p_year || lpad(p_month::text, 2, '0') ;
	i := 1;
	
	v_statements[i] := 'drop table if exists '||V_SCHEMA ||v_table_name;
							
	foreach v_statement in array v_statements loop
		raise debug '%', v_statement;
		if p_execute then 
			execute v_statement;
		end if;		
	end loop;		
	return;
end;

$$;


ALTER FUNCTION obanalytics._drop_leaf_matches_partition(p_exchange text, p_pair text, p_year integer, p_month integer, p_execute boolean) OWNER TO "ob-analytics";

--
-- Name: _is_valid_taker_event(timestamp with time zone, bigint, integer, integer, integer, timestamp with time zone); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._is_valid_taker_event(p_microtimestamp timestamp with time zone, p_order_id bigint, p_event_no integer, p_pair_id integer, p_exchange_id integer, p_next_microtimestamp timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
begin 
	if p_next_microtimestamp = '-infinity' then
		return true;
	else
		raise exception 'Invalid taker event: % % % % %', p_microtimestamp, p_order_id, p_event_no, 
				(select pair from obanalytics.pairs where pair_id = p_pair_id),
				(select exchange from obanalytics.exchanges where exchange_id = p_exchange_id);
	end if;				
end;
$$;


ALTER FUNCTION obanalytics._is_valid_taker_event(p_microtimestamp timestamp with time zone, p_order_id bigint, p_event_no integer, p_pair_id integer, p_exchange_id integer, p_next_microtimestamp timestamp with time zone) OWNER TO "ob-analytics";

--
-- Name: _level3_uuid(timestamp with time zone, bigint, integer, smallint, smallint); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._level3_uuid(p_microtimestamp timestamp with time zone, p_order_id bigint, p_event_no integer, p_pair_id smallint, p_exchange_id smallint) RETURNS uuid
    LANGUAGE sql IMMUTABLE
    AS $$select md5(p_microtimestamp::text||'#'||p_order_id::text||'#'||p_event_no::text||'#'||p_exchange_id||'#'||p_pair_id)::uuid;$$;


ALTER FUNCTION obanalytics._level3_uuid(p_microtimestamp timestamp with time zone, p_order_id bigint, p_event_no integer, p_pair_id smallint, p_exchange_id smallint) OWNER TO "ob-analytics";

--
-- Name: _order_book_after_episode(obanalytics.level3[], obanalytics.level3[], boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._order_book_after_episode(p_ob obanalytics.level3[], p_ep obanalytics.level3[], p_check_takers boolean) RETURNS obanalytics.level3[]
    LANGUAGE plpgsql STABLE
    AS $$
begin
	if p_ob is null then
		select ob into p_ob
		from obanalytics.order_book(p_ep[1].microtimestamp, p_ep[1].pair_id, p_ep[1].exchange_id, p_only_makers := false, p_before := true, p_check_takers := p_check_takers );
	end if;
	
	return ( with mix as (
						select ob.*, false as is_deleted
						from unnest(p_ob) ob
						union all
						select ob.*, next_microtimestamp = '-infinity'::timestamptz as is_deleted
						from unnest(p_ep) ob
					),
					latest_events as (
						select distinct on (order_id) *
						from mix
						order by order_id, event_no desc	-- just take the latest event_no for each order
					),
					orders as (
					select microtimestamp, order_id, event_no, side, price, amount, fill, next_microtimestamp, next_event_no, pair_id, exchange_id, local_timestamp,
							price_microtimestamp, price_event_no, exchange_microtimestamp, 
							coalesce(
								case side
									when 'b' then price <= min(price) filter (where side = 's' and amount > 0 ) over (order by price_microtimestamp, microtimestamp)
									when 's' then price >= max(price) filter (where side = 'b' and amount > 0 ) over (order by price_microtimestamp, microtimestamp)
								end,
							true) -- if there are only 'buy' or 'sell' orders in the order book at some moment in time, then all of them are makers
							as is_maker,
							coalesce(
								case side 
									when 'b' then price >= min(price) filter (where side = 's' and amount > 0 ) over (order by price_microtimestamp desc, microtimestamp desc)
									when 's' then price <= max(price) filter (where side = 'b' and amount > 0 ) over (order by price_microtimestamp desc, microtimestamp desc)
								end,
							false )	-- if there are only 'b' or 's' orders in the order book at some moment in time, then all of them are not crossed
							as is_crossed
					from latest_events
					where not is_deleted
				)
				select array(
					select orders::obanalytics.level3
					from orders
					where is_maker 
					    or not p_check_takers 
					    or obanalytics._is_valid_taker_event(microtimestamp, order_id, event_no, pair_id, exchange_id, next_microtimestamp)
					order by microtimestamp, order_id, event_no 
					-- order by must be the same as in obanalytics.order_book(). Change both!					
				));
end;   

$$;


ALTER FUNCTION obanalytics._order_book_after_episode(p_ob obanalytics.level3[], p_ep obanalytics.level3[], p_check_takers boolean) OWNER TO "ob-analytics";

--
-- Name: level1; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint NOT NULL
)
PARTITION BY LIST (exchange_id);


ALTER TABLE obanalytics.level1 OWNER TO "ob-analytics";

--
-- Name: _spread_from_order_book(timestamp with time zone, obanalytics.level3[]); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics._spread_from_order_book(p_ts timestamp with time zone, p_order_book obanalytics.level3[]) RETURNS obanalytics.level1
    LANGUAGE sql IMMUTABLE
    AS $$

with price_levels as (
	select side,
			price,
			sum(amount) as qty, 
			case side
					when 's' then price is not distinct from min(price) filter (where side = 's') over ()
					when 'b' then price is not distinct from max(price) filter (where side = 'b') over ()
			end as is_best,
			pair_id,
			exchange_id
	from unnest(p_order_book)
	where is_maker
	group by exchange_id, pair_id,side, price
)
select b.price, b.qty, s.price, s.qty, p_ts, pair_id, exchange_id
from (select * from price_levels where side = 'b' and is_best) b full join 
	  (select * from price_levels where side = 's' and is_best) s using (exchange_id, pair_id);

$$;


ALTER FUNCTION obanalytics._spread_from_order_book(p_ts timestamp with time zone, p_order_book obanalytics.level3[]) OWNER TO "ob-analytics";

--
-- Name: create_partitions(text, text, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.create_partitions(p_exchange text, p_pair text, p_year integer, p_month integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin 
	perform obanalytics._create_level1_partition(p_exchange, p_pair, p_year, p_month);
	perform obanalytics._create_level2_partition(p_exchange, p_pair, 'r0', p_year, p_month);
	perform obanalytics._create_level3_partition(p_exchange, 'b', p_pair, p_year, p_month);
	perform obanalytics._create_level3_partition(p_exchange, 's', p_pair, p_year, p_month);
	perform obanalytics._create_matches_partition(p_exchange, p_pair, p_year, p_month);
end;
$$;


ALTER FUNCTION obanalytics.create_partitions(p_exchange text, p_pair text, p_year integer, p_month integer) OWNER TO "ob-analytics";

--
-- Name: crossed_books(timestamp with time zone, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS TABLE(previous_uncrossed timestamp with time zone, next_uncrossed timestamp with time zone, pair_id smallint, exchange_id smallint)
    LANGUAGE sql STABLE
    AS $$

with base_order_books as (
	select ts, exists (select * from unnest(ob) where not is_maker) as is_crossed
	from  obanalytics.order_book_by_episode(p_start_time, p_end_time + 
											make_interval(
												secs := parameters.max_microtimestamp_change()),	-- next_uncrossed may be few seconds beyond p_end_time
											p_pair_id, p_exchange_id, false) ob					-- if we dont' find it, merge_crossed_books() will stuck 
																								-- i.e. will not be able to fix an invalid taker event
	),
order_books as (
	select ts, is_crossed, 
	coalesce(max(ts) filter (where not is_crossed) over (order by ts), p_start_time - '00:00:00.000001'::interval ) as previous_uncrossed,
	min(ts) filter (where not is_crossed) over (order by ts desc) as next_uncrossed
	from base_order_books 
)
select distinct previous_uncrossed, next_uncrossed, p_pair_id::smallint, p_exchange_id::smallint
from order_books
where is_crossed 
  and previous_uncrossed < p_end_time
;  
$$;


ALTER FUNCTION obanalytics.crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: level2; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST (exchange_id);


ALTER TABLE obanalytics.level2 OWNER TO "ob-analytics";

--
-- Name: depth_change_by_episode(timestamp with time zone, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.depth_change_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS SETOF obanalytics.level2
    LANGUAGE plpgsql STABLE
    AS $$

-- ARGUMENTS
--		p_start_time - the start of the interval for the calculation of depths
--		p_end_time	 - the end of the interval
--		p_pair_id	 - the id of pair for which depths will be calculated
--		p_exchange_id - the id of exchange where depths will be calculated
-- NOTE
--		Precision of depth is P0, i.e. not rounded prices are used
declare
	v_ob_before record;
	v_ob record;
begin
	
	select ts, ob 
	from obanalytics.order_book(p_start_time, p_pair_id, p_exchange_id, p_only_makers := true, p_before := true) 
	into v_ob_before;	-- so there will be a depth_change generated for the very first episode greater or equal to p_start_time
	
	for v_ob in select ts, ob from obanalytics.order_book_by_episode(p_start_time, p_end_time, p_pair_id, p_exchange_id) 
	loop
		if v_ob_before is not null then -- if p_start_time equals to an era start then v_ob_before will be null 
										 -- so we don't generate depth_change for the era start
			return query 
				select v_ob.ts, p_pair_id::smallint, p_exchange_id::smallint, 'r0'::character(2), d
				from obanalytics._depth_change(v_ob_before.ob, v_ob.ob) d;
		end if;
		v_ob_before := v_ob;
	end loop;			
end;

$$;


ALTER FUNCTION obanalytics.depth_change_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: draws_from_spread(timestamp with time zone, timestamp with time zone, integer, integer, text, numeric, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.draws_from_spread(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_exchange_id integer, p_pair_id integer, p_draw_type text, p_minimal_draw numeric DEFAULT 0.0, p_price_decimal_places integer DEFAULT 2) RETURNS TABLE(start_microtimestamp timestamp with time zone, end_microtimestamp timestamp with time zone, last_microtimestamp timestamp with time zone, start_price numeric, end_price numeric, last_price numeric, exchange_id smallint, pair_id smallint, draw_type text, draw_size numeric, minimal_draw numeric, exchange text, pair text)
    LANGUAGE sql STABLE
    AS $$ 

with spread as (
	select microtimestamp, best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, pair_id 
	from obanalytics.level1 
	where exchange_id = p_exchange_id
	  and pair_id = p_pair_id
	  and microtimestamp between p_start_time and p_end_time
),
base_draws as (
	select spread.*,
			obanalytics.draw_agg(microtimestamp,
								 case p_draw_type 
								 	when 'bid' then round(best_bid_price, p_price_decimal_places)
								    when 'ask' then round(best_ask_price, p_price_decimal_places)
								    when 'mid-price' then round((best_bid_price + best_ask_price)/2, p_price_decimal_places)
								 end,
								 p_minimal_draw) over w as draw, 
			p_draw_type as draw_type
	from spread
	window w as (order by microtimestamp)
),
draws as (
	select draw[1].microtimestamp as start_microtimestamp, 
			draw[1].price as start_price, 
			draw[2].microtimestamp as end_microtimestamp,
			draw[2].price as end_price,
			draw[3].microtimestamp as last_microtimestamp,
			draw[3].price as last_price,
			draw_type
	from base_draws
)
select distinct on (start_microtimestamp, draw_type )
					 start_microtimestamp, 
					 last_value(end_microtimestamp) over w as end_microtimestamp,
					 last_microtimestamp,
					 start_price, 
					 last_value(end_price) over w as end_price,
					 last_price,
					 p_exchange_id::smallint, 
					 p_pair_id::smallint,
					 draw_type,
					 round((end_price - start_price)/start_price * 10000.0, 2),
					 p_minimal_draw,
					 (select exchange from obanalytics.exchanges where exchange_id = p_exchange_id),
					 (select pair from obanalytics.pairs where pair_id = p_pair_id)
from draws
window w as ( partition by start_microtimestamp, draw_type order by end_microtimestamp )
order by draw_type, start_microtimestamp, end_microtimestamp desc, last_microtimestamp desc	

$$;


ALTER FUNCTION obanalytics.draws_from_spread(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_exchange_id integer, p_pair_id integer, p_draw_type text, p_minimal_draw numeric, p_price_decimal_places integer) OWNER TO "ob-analytics";

--
-- Name: drop_leaf_partitions(text, text, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.drop_leaf_partitions(p_exchange text, p_pair text, p_year integer, p_month integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin 
	perform obanalytics._drop_leaf_matches_partition(p_exchange, p_pair, p_year, p_month, true);
	perform obanalytics._drop_leaf_level3_partition(p_exchange, 'b', p_pair, p_year, p_month, true);
	perform obanalytics._drop_leaf_level3_partition(p_exchange, 's', p_pair, p_year, p_month, true);
	perform obanalytics._drop_leaf_level2_partition(p_exchange, p_pair, 'p0', p_year, p_month, true);	
	perform obanalytics._drop_leaf_level1_partition(p_exchange, p_pair, p_year, p_month, true);
	
end;
$$;


ALTER FUNCTION obanalytics.drop_leaf_partitions(p_exchange text, p_pair text, p_year integer, p_month integer) OWNER TO "ob-analytics";

--
-- Name: fix_crossed_books(timestamp with time zone, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.fix_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS SETOF obanalytics.level3
    LANGUAGE plpgsql
    AS $$

-- NOTE:
--		This function is supposed to be doing something useful only after pga_spread() is failed due to crossed order book
--		It is expected that Bitfinex produces rather few 'bad' events and rarely, so order book is crossed for relatively short
-- 		period of time (i.e. 5 minutes). Otherwise one has to run this function manually, with higher p_max_interval

declare 
	v_current_timestamp timestamptz;
	
begin 
	v_current_timestamp := clock_timestamp();
	
	-- First remove eternal and crossed orders, which should have been removed by Bitfinex, but weren't for some reasons
	return query 
		insert into obanalytics.level3 (microtimestamp, order_id, event_no, side, price, amount, fill, next_microtimestamp, next_event_no, pair_id, exchange_id, local_timestamp, price_microtimestamp, price_event_no)
		select distinct on (microtimestamp, order_id)  ts, order_id, 
				null as event_no, -- null here (as well as any null below) should case before row trigger to fire and to update the previous event 
				side, price, amount, fill, '-infinity',
				null as next_event_no,
				pair_id, exchange_id, null as local_timestamp,
				null as price_microtimestamp, 
				null as price_event_no
		from obanalytics.order_book_by_episode(p_start_time, p_end_time, p_pair_id, p_exchange_id, p_check_takers :=false) 
		join unnest(ob) ob on true 
		where is_crossed and next_microtimestamp = 'infinity'
		order by microtimestamp, order_id,
				  ts	-- we need the earliest ts where order book became crossed
		returning level3.*;
		
	-- Second, remove takers, which have been removed by an exchange, but for some reasons too late!
	return query 		
		with takers as (
			select distinct  on (microtimestamp, order_id, event_no) microtimestamp, order_id, event_no, next_microtimestamp, next_event_no
			from obanalytics.order_book_by_episode(p_start_time, p_end_time, p_pair_id, p_exchange_id, p_check_takers :=false) 
			join unnest(ob) as ob on true
			where not is_maker
		),
		updated as (
			update obanalytics.level3
			  set microtimestamp = takers.microtimestamp
			from takers
			where exchange_id = p_exchange_id
			  and pair_id = p_pair_id
			  and level3.microtimestamp = takers.next_microtimestamp
			  and level3.order_id = takers.order_id
			  and level3.event_no = takers.next_event_no
			  and level3.next_microtimestamp = '-infinity'
			  and level3.microtimestamp between p_start_time and p_end_time + make_interval(secs := parameters.max_microtimestamp_change())
			returning level3.*
		)
		select *
		from updated;  
		
	-- Thirs remove crossed orders, which have been removed by an exchange, but again for some reasons too late!
	-- This step must be done AFTER removal of takers above
	return query 		
		with crossed as (
			select distinct  on (microtimestamp, order_id, event_no) microtimestamp, order_id, event_no, next_microtimestamp, next_event_no
			from obanalytics.order_book_by_episode(p_start_time, p_end_time, p_pair_id, p_exchange_id, p_check_takers :=false) 
			join unnest(ob) as ob on true
			where is_crossed 
		),
		updated as (
			update obanalytics.level3
			  set microtimestamp = crossed.microtimestamp
			from crossed
			where exchange_id = p_exchange_id
			  and pair_id = p_pair_id
			  and level3.microtimestamp = crossed.next_microtimestamp
			  and level3.order_id = crossed.order_id
			  and level3.event_no = crossed.next_event_no
			  and level3.next_microtimestamp = '-infinity'
			  and level3.microtimestamp between p_start_time and p_end_time + make_interval(secs := parameters.max_microtimestamp_change())
			returning level3.*
		)
		select *
		from updated;  
		
			
	-- Finally, try to merge remaining episodes producing crossed order books
	return query select * from obanalytics.merge_crossed_books(p_start_time, p_end_time, p_pair_id, p_exchange_id);
	
	raise debug 'fix_crossed_books() exec time: %', clock_timestamp() - v_current_timestamp;
	return;
end;

$$;


ALTER FUNCTION obanalytics.fix_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: level1_update_level3_eras(); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.level1_update_level3_eras() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	with latest_events as (
		select exchange_id, pair_id, max(microtimestamp) as latest
		from inserted
		group by exchange_id, pair_id
	),
	eras as (
		select exchange_id, pair_id, latest, max(era) as era
		from obanalytics.level3_eras join latest_events using (exchange_id, pair_id)
		where era <= latest
		group by exchange_id, pair_id, latest
	)
	update obanalytics.level3_eras
	   set level1 = latest
	from eras
	where level3_eras.era = eras.era
	  and level3_eras.exchange_id = eras.exchange_id
	  and level3_eras.pair_id = eras.pair_id
	  and (level1 is null or level1 < latest);
	return null;
end;
$$;


ALTER FUNCTION obanalytics.level1_update_level3_eras() OWNER TO "ob-analytics";

--
-- Name: level2_continuous(timestamp with time zone, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.level2_continuous(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS SETOF obanalytics.level2
    LANGUAGE sql STABLE
    AS $$

-- NOTE:
--	When 'microtimestamp' in returned record 
--		1. equals to 'p_start_time' and equals to some 'era' from obanalytics.level3_eras then 'depth_change' is a full depth from obanalytics.order_book(microtimestamp)
--		2. equals to 'p_start_time' and in the middle of an era or 
--		   'microtimestamp' > p_start_time and <= p_end_time and equals to some 'era' then 
--			'depth_change' is _depth_change(ob1, ob2) where ob1 = order_book(microtimestamp - '00:00:00.000001') and ob2 = order_book(microtimestamp)
--		3. Otherwise 'depth_change' is from corresponding obanalytics.level2 record
--	It is not possible to use order_book(p_before :=true) as the start of an era since it will be empty!

with periods as (
	select greatest(era_start, p_start_time) as period_start, least(era_end, p_end_time) as period_end, era_start
	from (
		select era as era_start, coalesce(lead(era) over (order by era) - '00:00:00.000001'::interval , 'infinity') as era_end
		from obanalytics.level3_eras
		where pair_id = p_pair_id
		  and exchange_id = p_exchange_id
	) e
	where p_start_time <= era_end
	  and p_end_time >= era_start
),
starting_depth_change as (
	select period_start, p_pair_id::smallint, p_exchange_id::smallint, 'r0', c
	from periods join obanalytics.order_book(  case when era_start = p_start_time then null else period_start - '00:00:00.000001'::interval end,
												p_pair_id,p_exchange_id, true, false,false ) b on true 
				 join obanalytics.order_book( period_start, p_pair_id,p_exchange_id, true, false,false ) a on true 
				 join obanalytics._depth_change(b.ob, a.ob) c on true
)
select *
from starting_depth_change
union all
select level2.*
from periods join obanalytics.level2 on true 
where microtimestamp > period_start
  and microtimestamp <= period_end
  and level2.pair_id = p_pair_id
  and level2.exchange_id = p_exchange_id 
  and level2.precision = 'r0'
  and microtimestamp > p_start_time and microtimestamp <= p_end_time -- otherwise, the query optimizer produces a crazy plan!
  ;

$$;


ALTER FUNCTION obanalytics.level2_continuous(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: level2_update_level3_eras(); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.level2_update_level3_eras() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	with latest_events as (
		select exchange_id, pair_id, max(microtimestamp) as latest
		from inserted
		group by exchange_id, pair_id
	),
	eras as (
		select exchange_id, pair_id, latest, max(era) as era
		from obanalytics.level3_eras join latest_events using (exchange_id, pair_id)
		where era <= latest
		group by exchange_id, pair_id, latest
	)
	update obanalytics.level3_eras
	   set level2 = latest
	from eras
	where level3_eras.era = eras.era
	  and level3_eras.exchange_id = eras.exchange_id
	  and level3_eras.pair_id = eras.pair_id
	  and (level2 is null or level2 < latest);
	return null;
end;
$$;


ALTER FUNCTION obanalytics.level2_update_level3_eras() OWNER TO "ob-analytics";

--
-- Name: level3_incorporate_new_event(); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.level3_incorporate_new_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

declare
	v_era timestamptz;
	v_amount numeric;
	
	v_event obanalytics.level3;
	
begin
	  
	if new.price_microtimestamp is null or new.event_no is null then 
		raise debug 'Will process  %, %', new.microtimestamp, new.order_id;
	-- The values of the above two columns depend on the previous event for the order_id if any and are mandatory (not null). 
	-- They have to be set by either an inserter of the record (more effective) or by this trigger
		begin
			select max(era) into v_era
			from obanalytics.level3_eras
			where pair_id = new.pair_id
			  and exchange_id = new.exchange_id
			  and era <= new.microtimestamp;
		
			update obanalytics.level3
			   set next_microtimestamp = new.microtimestamp,
				   next_event_no = event_no + 1
			where exchange_id = new.exchange_id
			  and pair_id = new.pair_id
			  and microtimestamp between v_era and new.microtimestamp
			  and order_id = new.order_id 
			  and side = new.side
			  and next_microtimestamp > new.microtimestamp
			returning *
			into v_event;
			-- amount, next_event_no INTO v_amount, NEW.event_no;
		exception 
			when too_many_rows then
				raise exception 'too many rows for %, %, %', new.microtimestamp, new.order_id, new.event_no;
		end;
		if found then
		
			if new.price = 0 then 
				new.price = v_event.price;
				new.amount = v_event.amount;
				new.fill = null;
			else
				new.fill := v_event.amount - new.amount; 
			end if;

			new.event_no := v_event.next_event_no;

			if v_event.price = new.price THEN 
				new.price_microtimestamp := v_event.price_microtimestamp;
				new.price_event_no := v_event.price_event_no;
			else	
				new.price_microtimestamp := new.microtimestamp;
				new.price_event_no := new.event_no;
			end if;

		else -- it is the first event for order_id (or first after the latest 'deletion' )
			-- new.fill will remain null. Might set it later from matched trade, if any
			if new.price > 0 then 
				new.price_microtimestamp := new.microtimestamp;
				new.price_event_no := 1;
				new.event_no := 1;
			else
				raise notice 'Skipped insertion of %, %, %, %', new.microtimestamp, new.order_id, new.event_no, new.local_timestamp;
				return null;	-- skip insertion
			end if;
		end if;
		
	end if;
	return new;
end;

$$;


ALTER FUNCTION obanalytics.level3_incorporate_new_event() OWNER TO "ob-analytics";

--
-- Name: level3_update_level3_eras(); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.level3_update_level3_eras() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	with latest_events as (
		select exchange_id, pair_id, max(microtimestamp) as latest
		from inserted
		group by exchange_id, pair_id
	),
	eras as (
		select exchange_id, pair_id, latest, max(era) as era
		from obanalytics.level3_eras join latest_events using (exchange_id, pair_id)
		where era <= latest
		group by exchange_id, pair_id, latest
	)
	update obanalytics.level3_eras
	   set level3 = latest
	from eras
	where level3_eras.era = eras.era
	  and level3_eras.exchange_id = eras.exchange_id
	  and level3_eras.pair_id = eras.pair_id
	  and (level3 is null or level3 < latest);
	return null;
end;
$$;


ALTER FUNCTION obanalytics.level3_update_level3_eras() OWNER TO "ob-analytics";

--
-- Name: merge_crossed_books(timestamp with time zone, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.merge_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) RETURNS SETOF obanalytics.level3
    LANGUAGE plpgsql
    AS $$
declare 
	crossed_books record;
	v_execution_start_time timestamp with time zone;
begin
	v_execution_start_time := clock_timestamp();
	raise debug 'merge_crossed_books(%, %, %, %)', p_start_time, p_end_time,  p_pair_id, p_exchange_id;

	for crossed_books in (select * from obanalytics.crossed_books(p_start_time, p_end_time, p_pair_id, p_exchange_id) where next_uncrossed is not null) loop
		if crossed_books.next_uncrossed is null then 
			raise exception 'Unable to find next uncrossed order book:  previous_uncrossed=%, pair_id=%, exchange_id=%', crossed_books.previous_uncrossed, p_pair_id, p_exchange_id;
		end if;
		return query with updated as (
						  update obanalytics.level3
							 set	microtimestamp = crossed_books.next_uncrossed	-- just merge all 'crossed' order books into the next uncrossed one 
/* 
						  select crossed_books.next_uncrossed as microtimestamp, order_id, event_no, side, price, amount, fill,
								 next_microtimestamp, next_event_no, pair_id, exchange_id, local_timestamp, price_microtimestamp, price_event_no, exchange_microtimestamp, is_maker, is_crossed						 
						  from obanalytics.level3
*/			
						  where level3.pair_id = p_pair_id
			                and level3.exchange_id = p_exchange_id
							and level3.microtimestamp > crossed_books.previous_uncrossed
							and level3.microtimestamp < crossed_books.next_uncrossed
						  returning level3.*
						)
						select *
						from updated;
	end loop;
	raise debug 'merge_crossed_books() exec time: %', clock_timestamp() - v_execution_start_time;	
end;	

$$;


ALTER FUNCTION obanalytics.merge_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) OWNER TO "ob-analytics";

--
-- Name: FUNCTION merge_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer); Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON FUNCTION obanalytics.merge_crossed_books(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer) IS 'Merges episode(s) which produce crossed book into the next one which does not ';


--
-- Name: order_book(timestamp with time zone, integer, integer, boolean, boolean, boolean, character); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.order_book(p_ts timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_makers boolean, p_before boolean, p_check_takers boolean DEFAULT false, p_side character DEFAULT NULL::bpchar) RETURNS TABLE(ts timestamp with time zone, ob obanalytics.level3[])
    LANGUAGE sql STABLE
    AS $$

	with orders as (
			select microtimestamp, order_id, event_no, side, price, amount, fill, next_microtimestamp, next_event_no, pair_id, exchange_id, local_timestamp,
					price_microtimestamp, price_event_no, exchange_microtimestamp, 
					coalesce(
						case side 
							when 'b' then price <= min(price) filter (where side = 's' and amount > 0 ) over (order by price_microtimestamp, microtimestamp)
							when 's' then price >= max(price) filter (where side = 'b' and amount > 0 ) over (order by price_microtimestamp, microtimestamp)
						end,
					true )	-- if there are only 'b' or 's' orders in the order book at some moment in time, then all of them are makers
					as is_maker,
					coalesce(
						case side 
							when 'b' then price >= min(price) filter (where side = 's' and amount > 0 ) over (order by price_microtimestamp desc, microtimestamp desc)
							when 's' then price <= max(price) filter (where side = 'b' and amount > 0 ) over (order by price_microtimestamp desc, microtimestamp desc)
						end,
					false )	-- if there are only 'b' or 's' orders in the order book at some moment in time, then all of them are not crossed
					as is_crossed
			from obanalytics.level3 
			where microtimestamp >= ( select max(era) as s
				 					   from obanalytics.level3_eras 
				 					   where era <= p_ts 
				    					 and pair_id = p_pair_id 
				   						 and exchange_id = p_exchange_id ) 
			  and case when p_before then  microtimestamp < p_ts and next_microtimestamp >= p_ts 
						when not p_before then microtimestamp <= p_ts and next_microtimestamp > p_ts 
		  	      end
			  and case when p_side is null then true else side =p_side end
			  and pair_id = p_pair_id
			  and exchange_id = p_exchange_id		
		)
	select (select max(microtimestamp) from orders ) as ts,
			array_agg(orders::obanalytics.level3 order by microtimestamp, order_id, event_no) 	
				  -- order by must be the same as in obanalytics._order_book_after_episode(). Change both!
    from orders
	where is_maker OR NOT p_only_makers
	  and (not p_check_takers or (not is_maker and obanalytics._is_valid_taker_event(microtimestamp, order_id, event_no, pair_id, exchange_id, next_microtimestamp)));

$$;


ALTER FUNCTION obanalytics.order_book(p_ts timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_makers boolean, p_before boolean, p_check_takers boolean, p_side character) OWNER TO "ob-analytics";

--
-- Name: order_book_by_episode(timestamp with time zone, timestamp with time zone, integer, integer, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.order_book_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_check_takers boolean DEFAULT true) RETURNS TABLE(ts timestamp with time zone, ob obanalytics.level3[])
    LANGUAGE sql STABLE
    AS $$

-- ARGUMENTS
--		p_start_time  - the start of the interval for the production of the order book snapshots
--		p_end_time	  - the end of the interval
--		p_pair_id	  - id of the pair for which order books will be calculated
--		p_exchange_id - id of the exchange where order book is calculated

-- DETAILS
-- 		An episode is a moment in time when the order book, derived from obanalytics's data is in consistent state. 
--		The state of the order book is consistent when:
--			(a) all events that happened simultaneously (i.e. having the same microtimestamp) are reflected in the order book
--			(b) both events that constitute a trade are reflected in the order book
-- 		This function processes the order book events sequentially and returns consistent snapshots of the order book between
--		p_start_time and p_end_time.
--		These consistent snapshots are then used to calculate spread, depth and depth.summary. Note that the consitent order book may still be crossed.
--		It is assumed that spread, depth and depth.summary will ignore the unprocessed agressors crossing the book. 
--		
with eras as (
	select era, next_era
	from (
		select era, coalesce(lead(era) over (order by era), 'infinity') as next_era
		from obanalytics.level3_eras
		where pair_id = p_pair_id
		  and exchange_id = p_exchange_id 
	) a
	where p_start_time < next_era 
	  and p_end_time >= era
)
select microtimestamp as ts, obanalytics.order_book_agg(episode, p_check_takers) over (partition by era order by microtimestamp)  as ob
from (
	select microtimestamp, array_agg(level3) as episode
	from obanalytics.level3
	where microtimestamp between p_start_time and p_end_time
	  and pair_id = p_pair_id
	  and exchange_id = p_exchange_id
	group by microtimestamp  
) a join eras on microtimestamp >= era and microtimestamp < next_era
order by era, ts

$$;


ALTER FUNCTION obanalytics.order_book_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_check_takers boolean) OWNER TO "ob-analytics";

--
-- Name: pga_summarize(text, text, interval, timestamp with time zone); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.pga_summarize(p_exchange text, p_pair text, p_max_interval interval DEFAULT '01:00:00'::interval, p_ts_within_era timestamp with time zone DEFAULT NULL::timestamp with time zone) RETURNS TABLE(summarized text, pair text, exchange text, first_microtimestamp timestamp with time zone, last_microtimestamp timestamp with time zone, record_count integer)
    LANGUAGE plpgsql
    AS $$

-- PARAMETERS:
--
--	p_max_interval	interval 		If NULL, summarize using all available data, subject to limitations, enforced by the other parameters.
-- 									If NOT NULL, then sum of all summarized intervals (for different eras, if more than one) will not exceed p_max_interval
--	p_ts_within_era	timestamptz		If NULL, summarize starting from the most recent level1 or level2 data (which is earlier) for all eras if more than one
--									If NOT NULL then summarize ONLY within the era p_ts_within_era belongs to

declare 
	v_current_timestamp timestamptz;
	
	v_first_era timestamptz;
	v_last_era timestamptz;
	
	v_start timestamptz;
	v_end timestamptz;
	
	v_pair_id obanalytics.pairs.pair_id%type;
	v_exchange_id obanalytics.exchanges.exchange_id%type;
	
	e record;
	
begin 
	v_current_timestamp := clock_timestamp();
	
	select pair_id into strict v_pair_id
	from obanalytics.pairs 
	where pairs.pair = upper(p_pair);
	
	select exchange_id into strict v_exchange_id
	from obanalytics.exchanges
	where exchanges.exchange = lower(p_exchange);
	
	begin

		if p_ts_within_era is null then	-- we start from the latest era where level1 and level2 have already been calculated.
										 -- If a new era has started this start point will ensure that we'll calculate remaining 
										 -- level1 and level2 for the old era(s) as well as the new one(s)
			select max(era) into v_first_era
			from obanalytics.level3_eras 
			where pair_id = v_pair_id
			   and exchange_id = v_exchange_id
			   and level1 is not null and level2 is not null;
			   
			if v_first_era is null then 
				-- start from the very first era available
				select min(era) into v_first_era
				from obanalytics.level3_eras 
				where pair_id = v_pair_id
				  and exchange_id = v_exchange_id;

			end if;
			
			v_last_era := 'infinity';	-- i.e. we'll summarize all eras after the first one

		else

			select max(era) into v_first_era
			from obanalytics.level3_eras 
			where pair_id = v_pair_id
			   and exchange_id = v_exchange_id
			   and p_ts_within_era >= era;
			   
			v_last_era := v_first_era;			   
			
		end if;

	end;
	
	create temp table if not exists level1 (like obanalytics.level1) on commit delete rows;
	create temp table if not exists level2 (like obanalytics.level2) on commit delete rows;
	
	
	for e in   select starts, ends, first_level1, first_level2
				from (
					select era as starts,
							coalesce(level3, 
								coalesce(lead(era) over (order by era)  - '00:00:00.000001'::interval, 'infinity'::timestamptz)
									) as ends,
							coalesce(level1 + '00:00:00.000001'::interval, era) as first_level1,
							coalesce(level2 + '00:00:00.000001'::interval, era) as first_level2
					from obanalytics.level3_eras 
					where pair_id = v_pair_id
					  and exchange_id = v_exchange_id
				) a
				where a.starts between v_first_era and v_last_era
				order by starts loop
				
		e.starts :=  least(e.first_level1, e.first_level2);
		e.ends := least(e.ends, e.starts + p_max_interval);
		
		raise debug 'pga_summarize(%, %) start: %, end: %, remaining interval: % ', p_exchange, p_pair, e.starts, e.ends, p_max_interval; 
		
		
/*		The SQL statement works slower than PL/PGSQL code. But may be improved in the future ... 

		with base as (
			select (obanalytics._spread_from_order_book(ts, ob)).*, obanalytics.depth_change_agg(ob) over (order by ts) as depth_change 
			from obanalytics.order_book_by_episode(e.starts, e.ends, v_pair_id, v_exchange_id)
		),
		insert_level2 as (
			insert into obanalytics.level2 (microtimestamp, pair_id, exchange_id, precision,  depth_change)
			select microtimestamp, pair_id, exchange_id, 'r0'::character(2), depth_change
			from base
			where depth_change is not null
			  and microtimestamp > e.first_level2
		)
		insert into obanalytics.level1 (best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, microtimestamp, pair_id, exchange_id)
		select best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, microtimestamp, pair_id, exchange_id
		from (
			select best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, microtimestamp, pair_id, exchange_id,
					lag(best_bid_price) over w as p_best_bid_price, 
					lag(best_bid_qty) over w as p_best_bid_qty,
					lag(best_ask_price) over w as p_best_ask_price,
					lag(best_ask_qty) over w as p_best_ask_qty
			from base
			window w as (order by microtimestamp)
		) a
		where microtimestamp > e.first_level1
		  and (  best_bid_price is distinct from p_best_bid_price
				 or best_bid_qty is distinct from p_best_bid_qty
				 or best_ask_price is distinct from p_best_ask_price
				 or best_ask_qty is distinct from p_best_ask_qty
			   ); */
		
		declare
			v_ob_before record;
			v_ob record;
			v_l1_before obanalytics.level1;
			v_l1 obanalytics.level1;
		begin

				select ts, ob 
				from obanalytics.order_book(e.starts, v_pair_id, v_exchange_id, p_only_makers := true, p_before := true) 
				into v_ob_before;	-- so we are readyf for a depth_change generation for the very first episode greater or equal to e.starts
				
				select * into v_l1_before
				from obanalytics.level1
				where microtimestamp = e.first_level1
				  and exchange_id = v_exchange_id
				  and pair_id = v_pair_id;

				for v_ob in select ts, ob from obanalytics.order_book_by_episode(e.starts, e.ends, v_pair_id, v_exchange_id) 
				loop
					if v_ob.ts > e.first_level1 then
						select * into v_l1
						from obanalytics._spread_from_order_book(v_ob.ts, v_ob.ob);
						
						if (v_l1_before.best_bid_price is distinct from v_l1.best_bid_price or
						    v_l1_before.best_bid_qty  is distinct from v_l1.best_bid_qty or
						    v_l1_before.best_ask_price is distinct from v_l1.best_ask_price or
						    v_l1_before.best_ask_qty is distinct from v_l1.best_ask_qty )
						then
							-- Let's check whether v_l1 is empty ...
							if v_l1.microtimestamp is not null then 
								insert into level1
								values (v_l1.*);
							else	-- it is empty (i.e. no orders in the order book)
								insert into level1 (microtimestamp, exchange_id, pair_id)
								values (v_ob.ts, v_exchange_id, v_pair_id);
							end if;
							
							v_l1_before := v_l1;
							
						end if;
						
					end if;
					
					if v_ob.ts > e.first_level2 then
						if v_ob_before is not null then -- if e.starts equals to an era start then v_ob_before will be null 
						
							insert into level2
							select v_ob.ts, v_pair_id::smallint, v_exchange_id::smallint, 'r0'::character(2), d 
							from obanalytics._depth_change(v_ob_before.ob, v_ob.ob) d
							where d is not null;
							
						end if;
						
					end if;
					v_ob_before := v_ob;
				end loop;			
				
				select 'level1', p_pair, p_exchange, min(microtimestamp), max(microtimestamp), count(*) 
				from level1
				group by exchange_id, pair_id
				into summarized, pair, exchange, first_microtimestamp, last_microtimestamp, record_count;
				return next;
				
				select 'level2', p_pair, p_exchange, min(microtimestamp), max(microtimestamp), count(*) 
				from level2
				group by exchange_id, pair_id
				into summarized, pair, exchange, first_microtimestamp, last_microtimestamp, record_count;
				return next;
				
				with deleted as (
					delete from level1
					returning level1.*
				)
				insert into obanalytics.level1
				select * from deleted;
				
				with deleted as (
					delete from level2
					returning level2.*
				)
				insert into obanalytics.level2
				select * from deleted;
				
		exception
			when raise_exception then
				declare
					v_bad_episode timestamptz;
					v_fixed integer;
				begin
					select substring(sqlerrm from 'Invalid taker event: ([0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9](.[0-9]+|)(\+|1)[0-2][0-4])')
					into v_bad_episode;
					
					if v_bad_episode is not null then
						raise log '%', sqlerrm;
						select count(*) into v_fixed
						from obanalytics.fix_crossed_books(v_bad_episode, v_bad_episode, v_pair_id, v_exchange_id);
						if v_fixed > 0 then 
							raise log 'Inserted/updated % for invalid taker at % ', v_fixed, v_bad_episode;
							exit;	-- We stop the summarization now. Next call this procedure will try to summarize this era again with the hope that the errors were fixed by the code above
						else
							-- We got stuck, so report an error!
							raise exception 'STUCK: inserted/updated % for invalid taker at % ', v_fixed, v_bad_episode;
						end if;
					else 
						raise exception '%', sqlerrm;	-- We caught an unexpected exception, re-throw it
					end if;
				end;
		end;

		if p_max_interval is not null then 
			p_max_interval := greatest('00:00:00'::interval, p_max_interval - (e.ends - least(e.first_level1,  e.first_level2)));

			if p_max_interval = '00:00:00'::interval then
				exit;
			end if;

		end if;
		
	end loop;
	
	raise debug 'pga_summarize(%, %, %, %) exec time: %', p_exchange, p_pair, p_max_interval, p_ts_within_era, clock_timestamp() - v_current_timestamp;
	return;
end;

$$;


ALTER FUNCTION obanalytics.pga_summarize(p_exchange text, p_pair text, p_max_interval interval, p_ts_within_era timestamp with time zone) OWNER TO "ob-analytics";

--
-- Name: save_exchange_microtimestamp(); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.save_exchange_microtimestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ 
begin
	if abs(extract(epoch from new.microtimestamp - old.microtimestamp)) > parameters.max_microtimestamp_change() then	
		raise exception 'An attempt to move % % % % % to % is blocked', old.microtimestamp, old.order_id, old.event_no, old.pair_id, old.exchange_id, new.microtimestamp;
	end if;
	-- It is assumed that the first-ever value of microtimestamp column is set by an exchange.
	-- If it is changed for the first time, then save it to exchange_microtimestamp.
	if old.exchange_microtimestamp is null then
		if old.microtimestamp is distinct from new.microtimestamp then
			new.exchange_microtimestamp := old.microtimestamp;
		end if;
	end if;		
	return new;
end;
	

$$;


ALTER FUNCTION obanalytics.save_exchange_microtimestamp() OWNER TO "ob-analytics";

--
-- Name: spread_by_episode(timestamp with time zone, timestamp with time zone, integer, integer, boolean, boolean); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.spread_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_different boolean DEFAULT true, p_with_order_book boolean DEFAULT false) RETURNS TABLE(best_bid_price numeric, best_bid_qty numeric, best_ask_price numeric, best_ask_qty numeric, microtimestamp timestamp with time zone, pair_id smallint, exchange_id smallint, order_book obanalytics.level3[])
    LANGUAGE sql STABLE
    AS $$

-- ARGUMENTS
--		p_start_time  - the start of the interval for the calculation of spreads
--		p_end_time	  - the end of the interval
--		p_pair_id	  - the pair for which spreads will be calculated
--		p_exchange_id - the exchange where spreads will be calculated for
--		p_only_different - whether to output a spread when it is different from the previous one
--		p_with_order_book - whether to output the order book which was used to calculate spread (slow, generates a lot of data!)

with spread as (
	select (obanalytics._spread_from_order_book(ts, ob)).*, case  when p_with_order_book then ob else null end as ob
	from obanalytics.order_book_by_episode(p_start_time, p_end_time, p_pair_id, p_exchange_id)
)
select best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, microtimestamp, pair_id, exchange_id, ob
from (
	select best_bid_price, best_bid_qty, best_ask_price, best_ask_qty, microtimestamp, pair_id, exchange_id, ob,
		    lag(best_bid_price) over w as p_best_bid_price, 
			lag(best_bid_qty) over w as p_best_bid_qty,
			lag(best_ask_price) over w as p_best_ask_price,
			lag(best_ask_qty) over w as p_best_ask_qty
	from spread
	window w as (order by microtimestamp)
) a
where microtimestamp is not null 
  and ( not p_only_different 
	   	 or best_bid_price is distinct from p_best_bid_price
	     or best_bid_qty is distinct from p_best_bid_qty
	     or best_ask_price is distinct from p_best_ask_price
	     or best_ask_qty is distinct from p_best_ask_qty
	   )
order by microtimestamp

$$;


ALTER FUNCTION obanalytics.spread_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_different boolean, p_with_order_book boolean) OWNER TO "ob-analytics";

--
-- Name: FUNCTION spread_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_different boolean, p_with_order_book boolean); Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON FUNCTION obanalytics.spread_by_episode(p_start_time timestamp with time zone, p_end_time timestamp with time zone, p_pair_id integer, p_exchange_id integer, p_only_different boolean, p_with_order_book boolean) IS 'Calculates the best bid and ask prices and quantities (so called "spread") after each episode in the ''level3'' table that hits the interval between p_start_time and p_end_time for the given "pair". The spread is calculated using all available data before p_start_time';


--
-- Name: summary(text, text, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: obanalytics; Owner: ob-analytics
--

CREATE FUNCTION obanalytics.summary(p_exchange text DEFAULT NULL::text, p_pair text DEFAULT NULL::text, p_start_time timestamp with time zone DEFAULT (now() - '02:00:00'::interval), p_end_time timestamp with time zone DEFAULT 'infinity'::timestamp with time zone) RETURNS TABLE(pair text, e_first text, e_last text, e_total bigint, e_per_sec numeric, t_first text, t_last text, t_total bigint, t_per_sec numeric, t_matched bigint, t_exchange bigint, exchange text, era text)
    LANGUAGE sql STABLE
    AS $$
		
with periods as (
	select exchange_id, pair_id, 
			case when p_starts < p_start_time then p_start_time else p_starts end as period_starts, 
			case when p_ends > p_end_time then p_end_time else p_ends end as period_ends, 	
			era
	from (
		select exchange_id, pair_id, era as p_starts, 
				coalesce(lead(era) over (partition by exchange_id, pair_id order by era) - '00:00:00.000001'::interval, 'infinity'::timestamptz) as p_ends, era
		from obanalytics.level3_eras
		where exchange_id in ( select exchange_id from obanalytics.exchanges where exchange = coalesce(lower(p_exchange), exchange) )
		  and pair_id in ( select pair_id from obanalytics.pairs where pair = coalesce(upper(p_pair), pair))
	) p 
	where p_ends >= p_start_time
   	  and p_starts <= p_end_time 
),
level3_base as (
	select * 
	from obanalytics.level3 
	where exchange_id in ( select exchange_id from obanalytics.exchanges where exchange = coalesce(lower(p_exchange), exchange))
	  and pair_id in ( select pair_id from obanalytics.pairs where pair = coalesce(upper(p_pair), pair))
	  and microtimestamp  between p_start_time and p_end_time
),
events as (		
	select exchange_id,
			pair_id,
			period_starts,
			period_ends,
			min(microtimestamp) filter (where microtimestamp between period_starts and period_ends) as e_first, 
			max(microtimestamp) filter (where microtimestamp between period_starts and period_ends) as e_last,
			count(*) filter (where microtimestamp between period_starts and period_ends) as e_total
	from periods join level3_base using (exchange_id, pair_id)
	where microtimestamp between period_starts and period_ends 	
	  
	group by exchange_id, pair_id, period_starts, period_ends
),
matches_base as (
	select *
	from obanalytics.matches
	where exchange_id in ( select exchange_id from obanalytics.exchanges where exchange = coalesce(lower(p_exchange), exchange))
	  and pair_id in ( select pair_id from obanalytics.pairs where pair = coalesce(upper(p_pair), pair))
	  and microtimestamp  between p_start_time and p_end_time
),
trades as (		
	select exchange_id,
			pair_id,
			period_starts,
			period_ends,
			min(microtimestamp) filter (where microtimestamp between period_starts and period_ends) as t_first, 
			max(microtimestamp) filter (where microtimestamp between period_starts and period_ends) as t_last,
			count(*) filter (where microtimestamp between period_starts and period_ends) as t_total,
			count(*) filter (where microtimestamp between period_starts and period_ends and (buy_order_id is not null or sell_order_id is not null )) as t_matched,
			count(*) filter (where microtimestamp between period_starts and period_ends and exchange_trade_id is not null) as t_exchange
	from periods join matches_base using (exchange_id, pair_id)
	where microtimestamp between period_starts and period_ends
	group by exchange_id, pair_id, period_starts, period_ends
)		
select pairs.pair, e_first::text, e_last::text, e_total, 
		case  when extract( epoch from e_last - e_first ) > 0 then round((e_total/extract( epoch from e_last - e_first ))::numeric,2)
	  		   else 0 
		end as e_per_sec,		
		t_first::text, t_last::text,
		t_total, 
		case  when extract( epoch from t_last - t_first ) > 0 then round((t_total/extract( epoch from t_last - t_first ))::numeric,2)
	  		   else 0 
		end as t_per_sec,		
		t_matched, t_exchange, exchanges.exchange, periods.era::text
from periods join obanalytics.pairs using (pair_id) join obanalytics.exchanges using (exchange_id) left join events using (exchange_id, pair_id, period_starts, period_ends)
		left join trades using (exchange_id, pair_id, period_starts, period_ends)
where e_first is not null							 
$$;


ALTER FUNCTION obanalytics.summary(p_exchange text, p_pair text, p_start_time timestamp with time zone, p_end_time timestamp with time zone) OWNER TO "ob-analytics";

--
-- Name: depth_change_agg(obanalytics.level3[]); Type: AGGREGATE; Schema: obanalytics; Owner: ob-analytics
--

CREATE AGGREGATE obanalytics.depth_change_agg(obanalytics.level3[]) (
    SFUNC = obanalytics._depth_change_sfunc,
    STYPE = obanalytics.pair_of_ob,
    FINALFUNC = obanalytics._depth_change
);


ALTER AGGREGATE obanalytics.depth_change_agg(obanalytics.level3[]) OWNER TO "ob-analytics";

--
-- Name: depth_summary_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer, integer, integer); Type: AGGREGATE; Schema: obanalytics; Owner: ob-analytics
--

CREATE AGGREGATE obanalytics.depth_summary_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer, integer, integer) (
    SFUNC = obanalytics._depth_summary_after_depth_change,
    STYPE = obanalytics.level2_depth_summary_internal_state,
    FINALFUNC = obanalytics._depth_summary
);


ALTER AGGREGATE obanalytics.depth_summary_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer, integer, integer) OWNER TO "ob-analytics";

--
-- Name: draw_agg(timestamp with time zone, numeric, numeric); Type: AGGREGATE; Schema: obanalytics; Owner: ob-analytics
--

CREATE AGGREGATE obanalytics.draw_agg(microtimestamp timestamp with time zone, price numeric, minimal_draw numeric) (
    SFUNC = obanalytics._create_or_extend_draw,
    STYPE = obanalytics.draw_interim_price[]
);


ALTER AGGREGATE obanalytics.draw_agg(microtimestamp timestamp with time zone, price numeric, minimal_draw numeric) OWNER TO "ob-analytics";

--
-- Name: order_book_agg(obanalytics.level3[], boolean); Type: AGGREGATE; Schema: obanalytics; Owner: ob-analytics
--

CREATE AGGREGATE obanalytics.order_book_agg(event obanalytics.level3[], boolean) (
    SFUNC = obanalytics._order_book_after_episode,
    STYPE = obanalytics.level3[]
);


ALTER AGGREGATE obanalytics.order_book_agg(event obanalytics.level3[], boolean) OWNER TO "ob-analytics";

--
-- Name: restore_depth_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer); Type: AGGREGATE; Schema: obanalytics; Owner: ob-analytics
--

CREATE AGGREGATE obanalytics.restore_depth_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer) (
    SFUNC = obanalytics._depth_after_depth_change,
    STYPE = obanalytics.level2_depth_record[]
);


ALTER AGGREGATE obanalytics.restore_depth_agg(obanalytics.level2_depth_record[], timestamp with time zone, integer, integer) OWNER TO "ob-analytics";

--
-- Name: exchanges; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.exchanges (
    exchange_id smallint NOT NULL,
    exchange text NOT NULL
);


ALTER TABLE obanalytics.exchanges OWNER TO "ob-analytics";

--
-- Name: level1_bitfinex; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitfinex (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level1 ATTACH PARTITION obanalytics.level1_bitfinex FOR VALUES IN ('1');


ALTER TABLE obanalytics.level1_bitfinex OWNER TO "ob-analytics";

--
-- Name: level1_bitfinex_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitfinex_btcusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitfinex ATTACH PARTITION obanalytics.level1_bitfinex_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.level1_bitfinex_btcusd OWNER TO "ob-analytics";

--
-- Name: level1_01001201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201903 OWNER TO "ob-analytics";

--
-- Name: level1_01001201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201904 OWNER TO "ob-analytics";

--
-- Name: level1_01001201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201905 OWNER TO "ob-analytics";

--
-- Name: level1_01001201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201906 OWNER TO "ob-analytics";

--
-- Name: level1_01001201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201907 OWNER TO "ob-analytics";

--
-- Name: level1_01001201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201908 OWNER TO "ob-analytics";

--
-- Name: level1_01001201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201909 OWNER TO "ob-analytics";

--
-- Name: level1_01001201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01001201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_btcusd ATTACH PARTITION obanalytics.level1_01001201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01001201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01001201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitfinex_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitfinex_ltcusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitfinex ATTACH PARTITION obanalytics.level1_bitfinex_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.level1_bitfinex_ltcusd OWNER TO "ob-analytics";

--
-- Name: level1_01002201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201903 OWNER TO "ob-analytics";

--
-- Name: level1_01002201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201904 OWNER TO "ob-analytics";

--
-- Name: level1_01002201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201905 OWNER TO "ob-analytics";

--
-- Name: level1_01002201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201906 OWNER TO "ob-analytics";

--
-- Name: level1_01002201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201907 OWNER TO "ob-analytics";

--
-- Name: level1_01002201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201908 OWNER TO "ob-analytics";

--
-- Name: level1_01002201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201909 OWNER TO "ob-analytics";

--
-- Name: level1_01002201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01002201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ltcusd ATTACH PARTITION obanalytics.level1_01002201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01002201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01002201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitfinex_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitfinex_ethusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitfinex ATTACH PARTITION obanalytics.level1_bitfinex_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.level1_bitfinex_ethusd OWNER TO "ob-analytics";

--
-- Name: level1_01003201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201903 OWNER TO "ob-analytics";

--
-- Name: level1_01003201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201904 OWNER TO "ob-analytics";

--
-- Name: level1_01003201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201905 OWNER TO "ob-analytics";

--
-- Name: level1_01003201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201906 OWNER TO "ob-analytics";

--
-- Name: level1_01003201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201907 OWNER TO "ob-analytics";

--
-- Name: level1_01003201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201908 OWNER TO "ob-analytics";

--
-- Name: level1_01003201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201909 OWNER TO "ob-analytics";

--
-- Name: level1_01003201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_01003201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitfinex_ethusd ATTACH PARTITION obanalytics.level1_01003201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_01003201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_01003201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level1 ATTACH PARTITION obanalytics.level1_bitstamp FOR VALUES IN ('2');


ALTER TABLE obanalytics.level1_bitstamp OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_btcusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.level1_bitstamp_btcusd OWNER TO "ob-analytics";

--
-- Name: level1_02001201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201901 OWNER TO "ob-analytics";

--
-- Name: level1_02001201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201902 OWNER TO "ob-analytics";

--
-- Name: level1_02001201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201903 OWNER TO "ob-analytics";

--
-- Name: level1_02001201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201904 OWNER TO "ob-analytics";

--
-- Name: level1_02001201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201905 OWNER TO "ob-analytics";

--
-- Name: level1_02001201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201906 OWNER TO "ob-analytics";

--
-- Name: level1_02001201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201907 OWNER TO "ob-analytics";

--
-- Name: level1_02001201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201908 OWNER TO "ob-analytics";

--
-- Name: level1_02001201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201909 OWNER TO "ob-analytics";

--
-- Name: level1_02001201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02001201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btcusd ATTACH PARTITION obanalytics.level1_02001201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02001201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02001201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_ltcusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.level1_bitstamp_ltcusd OWNER TO "ob-analytics";

--
-- Name: level1_02002201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201901 OWNER TO "ob-analytics";

--
-- Name: level1_02002201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201902 OWNER TO "ob-analytics";

--
-- Name: level1_02002201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201903 OWNER TO "ob-analytics";

--
-- Name: level1_02002201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201904 OWNER TO "ob-analytics";

--
-- Name: level1_02002201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201905 OWNER TO "ob-analytics";

--
-- Name: level1_02002201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201906 OWNER TO "ob-analytics";

--
-- Name: level1_02002201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201907 OWNER TO "ob-analytics";

--
-- Name: level1_02002201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201908 OWNER TO "ob-analytics";

--
-- Name: level1_02002201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201909 OWNER TO "ob-analytics";

--
-- Name: level1_02002201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02002201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ltcusd ATTACH PARTITION obanalytics.level1_02002201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02002201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02002201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_ethusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.level1_bitstamp_ethusd OWNER TO "ob-analytics";

--
-- Name: level1_02003201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201901 OWNER TO "ob-analytics";

--
-- Name: level1_02003201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201902 OWNER TO "ob-analytics";

--
-- Name: level1_02003201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201903 OWNER TO "ob-analytics";

--
-- Name: level1_02003201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201904 OWNER TO "ob-analytics";

--
-- Name: level1_02003201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201905 OWNER TO "ob-analytics";

--
-- Name: level1_02003201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201906 OWNER TO "ob-analytics";

--
-- Name: level1_02003201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201907 OWNER TO "ob-analytics";

--
-- Name: level1_02003201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201908 OWNER TO "ob-analytics";

--
-- Name: level1_02003201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201909 OWNER TO "ob-analytics";

--
-- Name: level1_02003201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02003201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethusd ATTACH PARTITION obanalytics.level1_02003201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02003201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02003201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_xrpusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_xrpusd FOR VALUES IN ('4');


ALTER TABLE obanalytics.level1_bitstamp_xrpusd OWNER TO "ob-analytics";

--
-- Name: level1_02004201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201901 OWNER TO "ob-analytics";

--
-- Name: level1_02004201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201902 OWNER TO "ob-analytics";

--
-- Name: level1_02004201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201903 OWNER TO "ob-analytics";

--
-- Name: level1_02004201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201904 OWNER TO "ob-analytics";

--
-- Name: level1_02004201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201905 OWNER TO "ob-analytics";

--
-- Name: level1_02004201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201906 OWNER TO "ob-analytics";

--
-- Name: level1_02004201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201907 OWNER TO "ob-analytics";

--
-- Name: level1_02004201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201908 OWNER TO "ob-analytics";

--
-- Name: level1_02004201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201909 OWNER TO "ob-analytics";

--
-- Name: level1_02004201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02004201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_xrpusd ATTACH PARTITION obanalytics.level1_02004201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02004201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02004201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_bchusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_bchusd (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_bchusd FOR VALUES IN ('5');


ALTER TABLE obanalytics.level1_bitstamp_bchusd OWNER TO "ob-analytics";

--
-- Name: level1_02005201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201901 OWNER TO "ob-analytics";

--
-- Name: level1_02005201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201902 OWNER TO "ob-analytics";

--
-- Name: level1_02005201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201903 OWNER TO "ob-analytics";

--
-- Name: level1_02005201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201904 OWNER TO "ob-analytics";

--
-- Name: level1_02005201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201905 OWNER TO "ob-analytics";

--
-- Name: level1_02005201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201906 OWNER TO "ob-analytics";

--
-- Name: level1_02005201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201907 OWNER TO "ob-analytics";

--
-- Name: level1_02005201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201908 OWNER TO "ob-analytics";

--
-- Name: level1_02005201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201909 OWNER TO "ob-analytics";

--
-- Name: level1_02005201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02005201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_bchusd ATTACH PARTITION obanalytics.level1_02005201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02005201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02005201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_btceur; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_btceur (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_btceur FOR VALUES IN ('6');


ALTER TABLE obanalytics.level1_bitstamp_btceur OWNER TO "ob-analytics";

--
-- Name: level1_02006201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201901 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201901 OWNER TO "ob-analytics";

--
-- Name: level1_02006201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201902 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201902 OWNER TO "ob-analytics";

--
-- Name: level1_02006201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201903 OWNER TO "ob-analytics";

--
-- Name: level1_02006201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201904 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201904 OWNER TO "ob-analytics";

--
-- Name: level1_02006201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201905 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201905 OWNER TO "ob-analytics";

--
-- Name: level1_02006201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201906 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201906 OWNER TO "ob-analytics";

--
-- Name: level1_02006201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201907 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201907 OWNER TO "ob-analytics";

--
-- Name: level1_02006201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201908 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201908 OWNER TO "ob-analytics";

--
-- Name: level1_02006201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201909 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201909 OWNER TO "ob-analytics";

--
-- Name: level1_02006201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02006201910 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_btceur ATTACH PARTITION obanalytics.level1_02006201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02006201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02006201910 OWNER TO "ob-analytics";

--
-- Name: level1_bitstamp_ethbtc; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_bitstamp_ethbtc (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 7 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level1_bitstamp ATTACH PARTITION obanalytics.level1_bitstamp_ethbtc FOR VALUES IN ('7');


ALTER TABLE obanalytics.level1_bitstamp_ethbtc OWNER TO "ob-analytics";

--
-- Name: level1_02007201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level1_02007201903 (
    best_bid_price numeric,
    best_bid_qty numeric,
    best_ask_price numeric,
    best_ask_qty numeric,
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 7 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level1_bitstamp_ethbtc ATTACH PARTITION obanalytics.level1_02007201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level1_02007201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level1_02007201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level2 ATTACH PARTITION obanalytics.level2_bitfinex FOR VALUES IN ('1');


ALTER TABLE obanalytics.level2_bitfinex OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_btcusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitfinex ATTACH PARTITION obanalytics.level2_bitfinex_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.level2_bitfinex_btcusd OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_btcusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_btcusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd ATTACH PARTITION obanalytics.level2_bitfinex_btcusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitfinex_btcusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_01001p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_p0 ATTACH PARTITION obanalytics.level2_01001p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_btcusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_btcusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd ATTACH PARTITION obanalytics.level2_bitfinex_btcusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitfinex_btcusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01001r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01001r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_01001r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01001r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_btcusd_r0 ATTACH PARTITION obanalytics.level2_01001r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_01001r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ltcusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitfinex ATTACH PARTITION obanalytics.level2_bitfinex_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.level2_bitfinex_ltcusd OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ltcusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ltcusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd ATTACH PARTITION obanalytics.level2_bitfinex_ltcusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitfinex_ltcusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_01002p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_p0 ATTACH PARTITION obanalytics.level2_01002p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ltcusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ltcusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd ATTACH PARTITION obanalytics.level2_bitfinex_ltcusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitfinex_ltcusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01002r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01002r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_01002r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01002r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ltcusd_r0 ATTACH PARTITION obanalytics.level2_01002r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_01002r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ethusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitfinex ATTACH PARTITION obanalytics.level2_bitfinex_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.level2_bitfinex_ethusd OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ethusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ethusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd ATTACH PARTITION obanalytics.level2_bitfinex_ethusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitfinex_ethusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_01003p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_p0 ATTACH PARTITION obanalytics.level2_01003p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitfinex_ethusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitfinex_ethusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd ATTACH PARTITION obanalytics.level2_bitfinex_ethusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitfinex_ethusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_01003r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_01003r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_01003r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_01003r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitfinex_ethusd_r0 ATTACH PARTITION obanalytics.level2_01003r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_01003r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level2 ATTACH PARTITION obanalytics.level2_bitstamp FOR VALUES IN ('2');


ALTER TABLE obanalytics.level2_bitstamp OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btcusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.level2_bitstamp_btcusd OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btcusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btcusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd ATTACH PARTITION obanalytics.level2_bitstamp_btcusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_btcusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02001p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_p0 ATTACH PARTITION obanalytics.level2_02001p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02001p0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001p0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_p0 ATTACH PARTITION obanalytics.level2_02001p0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001p0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001p0201904 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btcusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btcusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd ATTACH PARTITION obanalytics.level2_bitstamp_btcusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_btcusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02001r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02001r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02001r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02001r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btcusd_r0 ATTACH PARTITION obanalytics.level2_02001r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02001r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ltcusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.level2_bitstamp_ltcusd OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ltcusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ltcusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd ATTACH PARTITION obanalytics.level2_bitstamp_ltcusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_ltcusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02002p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_p0 ATTACH PARTITION obanalytics.level2_02002p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ltcusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ltcusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd ATTACH PARTITION obanalytics.level2_bitstamp_ltcusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_ltcusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02002r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02002r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02002r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02002r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ltcusd_r0 ATTACH PARTITION obanalytics.level2_02002r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02002r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ethusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.level2_bitstamp_ethusd OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ethusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ethusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd ATTACH PARTITION obanalytics.level2_bitstamp_ethusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_ethusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02003p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_p0 ATTACH PARTITION obanalytics.level2_02003p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ethusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ethusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd ATTACH PARTITION obanalytics.level2_bitstamp_ethusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_ethusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02003r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02003r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02003r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02003r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethusd_r0 ATTACH PARTITION obanalytics.level2_02003r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02003r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_xrpusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_xrpusd FOR VALUES IN ('4');


ALTER TABLE obanalytics.level2_bitstamp_xrpusd OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_xrpusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_xrpusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd ATTACH PARTITION obanalytics.level2_bitstamp_xrpusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_xrpusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02004p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_p0 ATTACH PARTITION obanalytics.level2_02004p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_xrpusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_xrpusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd ATTACH PARTITION obanalytics.level2_bitstamp_xrpusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_xrpusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02004r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02004r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02004r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02004r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_xrpusd_r0 ATTACH PARTITION obanalytics.level2_02004r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02004r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_bchusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_bchusd (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_bchusd FOR VALUES IN ('5');


ALTER TABLE obanalytics.level2_bitstamp_bchusd OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_bchusd_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_bchusd_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd ATTACH PARTITION obanalytics.level2_bitstamp_bchusd_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_bchusd_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02005p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_p0 ATTACH PARTITION obanalytics.level2_02005p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_bchusd_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_bchusd_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd ATTACH PARTITION obanalytics.level2_bitstamp_bchusd_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_bchusd_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02005r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02005r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02005r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02005r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_bchusd_r0 ATTACH PARTITION obanalytics.level2_02005r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02005r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btceur; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btceur (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_btceur FOR VALUES IN ('6');


ALTER TABLE obanalytics.level2_bitstamp_btceur OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btceur_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btceur_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur ATTACH PARTITION obanalytics.level2_bitstamp_btceur_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_btceur_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02006p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_p0 ATTACH PARTITION obanalytics.level2_02006p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006p0201903 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_btceur_r0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_btceur_r0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur ATTACH PARTITION obanalytics.level2_bitstamp_btceur_r0 FOR VALUES IN ('r0');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_bitstamp_btceur_r0 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201901 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201901 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201902 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201902 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201903 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201904 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201904 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201905 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201905 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201906 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201906 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201907 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201907 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201908 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201908 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201909 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02006r0201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02006r0201909 OWNER TO "ob-analytics";

--
-- Name: level2_02006r0201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02006r0201910 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'r0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_btceur_r0 ATTACH PARTITION obanalytics.level2_02006r0201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level2_02006r0201910 OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ethbtc; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ethbtc (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 7 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY LIST ("precision");
ALTER TABLE ONLY obanalytics.level2_bitstamp ATTACH PARTITION obanalytics.level2_bitstamp_ethbtc FOR VALUES IN ('7');


ALTER TABLE obanalytics.level2_bitstamp_ethbtc OWNER TO "ob-analytics";

--
-- Name: level2_bitstamp_ethbtc_p0; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_bitstamp_ethbtc_p0 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 7 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethbtc ATTACH PARTITION obanalytics.level2_bitstamp_ethbtc_p0 FOR VALUES IN ('p0');


ALTER TABLE obanalytics.level2_bitstamp_ethbtc_p0 OWNER TO "ob-analytics";

--
-- Name: level2_02007p0201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level2_02007p0201903 (
    microtimestamp timestamp with time zone NOT NULL,
    pair_id smallint DEFAULT 7 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    "precision" character(2) DEFAULT 'p0'::bpchar NOT NULL,
    depth_change obanalytics.level2_depth_record[] NOT NULL
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level2_bitstamp_ethbtc_p0 ATTACH PARTITION obanalytics.level2_02007p0201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level2_02007p0201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level2_02007p0201903 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level3 ATTACH PARTITION obanalytics.level3_bitfinex FOR VALUES IN ('1');


ALTER TABLE obanalytics.level3_bitfinex OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_btcusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitfinex ATTACH PARTITION obanalytics.level3_bitfinex_btcusd FOR VALUES IN ('1');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_btcusd OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_btcusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_btcusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd ATTACH PARTITION obanalytics.level3_bitfinex_btcusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_btcusd_b OWNER TO "ob-analytics";

--
-- Name: level3_01001b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201902 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201903 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201904 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201905 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201906 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201907 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201908 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001b201909 OWNER TO "ob-analytics";

--
-- Name: level3_01001b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_b ATTACH PARTITION obanalytics.level3_01001b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_01001b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_btcusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_btcusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd ATTACH PARTITION obanalytics.level3_bitfinex_btcusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_btcusd_s OWNER TO "ob-analytics";

--
-- Name: level3_01001s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201902 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201903 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201904 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201905 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201906 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201907 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201908 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201909 OWNER TO "ob-analytics";

--
-- Name: level3_01001s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01001s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_btcusd_s ATTACH PARTITION obanalytics.level3_01001s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01001s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01001s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ltcusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitfinex ATTACH PARTITION obanalytics.level3_bitfinex_ltcusd FOR VALUES IN ('2');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ltcusd OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ltcusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ltcusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd ATTACH PARTITION obanalytics.level3_bitfinex_ltcusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ltcusd_b OWNER TO "ob-analytics";

--
-- Name: level3_01002b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201902 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201903 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201904 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201905 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201906 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201907 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201908 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002b201909 OWNER TO "ob-analytics";

--
-- Name: level3_01002b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_b ATTACH PARTITION obanalytics.level3_01002b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_01002b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ltcusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ltcusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd ATTACH PARTITION obanalytics.level3_bitfinex_ltcusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ltcusd_s OWNER TO "ob-analytics";

--
-- Name: level3_01002s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201902 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201903 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201904 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201905 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201906 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201907 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201908 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201909 OWNER TO "ob-analytics";

--
-- Name: level3_01002s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01002s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ltcusd_s ATTACH PARTITION obanalytics.level3_01002s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01002s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01002s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ethusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitfinex ATTACH PARTITION obanalytics.level3_bitfinex_ethusd FOR VALUES IN ('3');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ethusd OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ethusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ethusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd ATTACH PARTITION obanalytics.level3_bitfinex_ethusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ethusd_b OWNER TO "ob-analytics";

--
-- Name: level3_01003b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201902 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201903 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201904 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201905 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201906 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201907 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201908 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003b201909 OWNER TO "ob-analytics";

--
-- Name: level3_01003b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_b ATTACH PARTITION obanalytics.level3_01003b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_01003b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_ethusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_ethusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd ATTACH PARTITION obanalytics.level3_bitfinex_ethusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitfinex_ethusd_s OWNER TO "ob-analytics";

--
-- Name: level3_01003s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201902 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201903 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201904 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201905 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201906 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201907 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201908 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201909 OWNER TO "ob-analytics";

--
-- Name: level3_01003s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01003s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_ethusd_s ATTACH PARTITION obanalytics.level3_01003s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01003s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01003s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_xrpusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitfinex ATTACH PARTITION obanalytics.level3_bitfinex_xrpusd FOR VALUES IN ('4');


ALTER TABLE obanalytics.level3_bitfinex_xrpusd OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_xrpusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_xrpusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_xrpusd ATTACH PARTITION obanalytics.level3_bitfinex_xrpusd_b FOR VALUES IN ('b');


ALTER TABLE obanalytics.level3_bitfinex_xrpusd_b OWNER TO "ob-analytics";

--
-- Name: level3_01004b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01004b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_xrpusd_b ATTACH PARTITION obanalytics.level3_01004b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01004b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01004b201902 OWNER TO "ob-analytics";

--
-- Name: level3_bitfinex_xrpusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitfinex_xrpusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitfinex_xrpusd ATTACH PARTITION obanalytics.level3_bitfinex_xrpusd_s FOR VALUES IN ('s');


ALTER TABLE obanalytics.level3_bitfinex_xrpusd_s OWNER TO "ob-analytics";

--
-- Name: level3_01004s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_01004s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 1 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitfinex_xrpusd_s ATTACH PARTITION obanalytics.level3_01004s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_01004s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_01004s201902 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.level3 ATTACH PARTITION obanalytics.level3_bitstamp FOR VALUES IN ('2');


ALTER TABLE obanalytics.level3_bitstamp OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btcusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_btcusd FOR VALUES IN ('1');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btcusd OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btcusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btcusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd ATTACH PARTITION obanalytics.level3_bitstamp_btcusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btcusd_b OWNER TO "ob-analytics";

--
-- Name: level3_02001b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02001b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b ATTACH PARTITION obanalytics.level3_02001b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02001b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btcusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btcusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd ATTACH PARTITION obanalytics.level3_bitstamp_btcusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btcusd_s OWNER TO "ob-analytics";

--
-- Name: level3_02001s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02001s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02001s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s ATTACH PARTITION obanalytics.level3_02001s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02001s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02001s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ltcusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd FOR VALUES IN ('2');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ltcusd OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ltcusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ltcusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ltcusd_b OWNER TO "ob-analytics";

--
-- Name: level3_02002b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02002b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b ATTACH PARTITION obanalytics.level3_02002b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02002b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ltcusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ltcusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ltcusd_s OWNER TO "ob-analytics";

--
-- Name: level3_02002s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02002s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02002s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s ATTACH PARTITION obanalytics.level3_02002s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02002s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02002s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ethusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_ethusd FOR VALUES IN ('3');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ethusd OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ethusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ethusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd ATTACH PARTITION obanalytics.level3_bitstamp_ethusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ethusd_b OWNER TO "ob-analytics";

--
-- Name: level3_02003b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02003b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b ATTACH PARTITION obanalytics.level3_02003b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02003b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_ethusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_ethusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd ATTACH PARTITION obanalytics.level3_bitstamp_ethusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_ethusd_s OWNER TO "ob-analytics";

--
-- Name: level3_02003s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02003s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02003s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s ATTACH PARTITION obanalytics.level3_02003s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02003s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02003s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_xrpusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd FOR VALUES IN ('4');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_xrpusd OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_xrpusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_xrpusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_xrpusd_b OWNER TO "ob-analytics";

--
-- Name: level3_02004b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02004b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b ATTACH PARTITION obanalytics.level3_02004b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02004b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_xrpusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_xrpusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_xrpusd_s OWNER TO "ob-analytics";

--
-- Name: level3_02004s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02004s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02004s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s ATTACH PARTITION obanalytics.level3_02004s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02004s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02004s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_bchusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_bchusd (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_bchusd FOR VALUES IN ('5');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_bchusd OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_bchusd_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_bchusd_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd ATTACH PARTITION obanalytics.level3_bitstamp_bchusd_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_bchusd_b OWNER TO "ob-analytics";

--
-- Name: level3_02005b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02005b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b ATTACH PARTITION obanalytics.level3_02005b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02005b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_bchusd_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_bchusd_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd ATTACH PARTITION obanalytics.level3_bitstamp_bchusd_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_bchusd_s OWNER TO "ob-analytics";

--
-- Name: level3_02005s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02005s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02005s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s ATTACH PARTITION obanalytics.level3_02005s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02005s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02005s201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btceur; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btceur (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY LIST (side);
ALTER TABLE ONLY obanalytics.level3_bitstamp ATTACH PARTITION obanalytics.level3_bitstamp_btceur FOR VALUES IN ('6');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btceur OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btceur_b; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btceur_b (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur ATTACH PARTITION obanalytics.level3_bitstamp_btceur_b FOR VALUES IN ('b');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btceur_b OWNER TO "ob-analytics";

--
-- Name: level3_02006b201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201901 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201902 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201903 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201904 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201905 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201906 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201907 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201908 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006b201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006b201909 OWNER TO "ob-analytics";

--
-- Name: level3_02006b201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006b201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 'b'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b ATTACH PARTITION obanalytics.level3_02006b201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.level3_02006b201910 OWNER TO "ob-analytics";

--
-- Name: level3_bitstamp_btceur_s; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_bitstamp_btceur_s (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur ATTACH PARTITION obanalytics.level3_bitstamp_btceur_s FOR VALUES IN ('s');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_bitstamp_btceur_s OWNER TO "ob-analytics";

--
-- Name: level3_02006s201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201901 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201901 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201901 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201902 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201902 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201902 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201903 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201903 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201903 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201904 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201904 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201904 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201905 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201905 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201905 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201906 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201906 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201906 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201907 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201907 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201907 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201908 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201908 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201908 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201909 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201909 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201909 OWNER TO "ob-analytics";

--
-- Name: level3_02006s201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_02006s201910 (
    microtimestamp timestamp with time zone NOT NULL,
    order_id bigint NOT NULL,
    event_no integer NOT NULL,
    side character(1) DEFAULT 's'::bpchar NOT NULL,
    price numeric NOT NULL,
    amount numeric NOT NULL,
    fill numeric,
    next_microtimestamp timestamp with time zone NOT NULL,
    next_event_no integer,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_id smallint DEFAULT 2 NOT NULL,
    local_timestamp timestamp with time zone,
    price_microtimestamp timestamp with time zone NOT NULL,
    price_event_no integer,
    exchange_microtimestamp timestamp with time zone,
    is_maker boolean,
    is_crossed boolean,
    CONSTRAINT amount_is_not_negative CHECK ((amount >= (0)::numeric)),
    CONSTRAINT is_crossed_is_always_null CHECK ((is_crossed IS NULL)),
    CONSTRAINT is_maker_is_always_null CHECK ((is_maker IS NULL)),
    CONSTRAINT next_event_no CHECK ((((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone) AND (next_event_no IS NOT NULL)) OR ((NOT ((next_microtimestamp < 'infinity'::timestamp with time zone) AND (next_microtimestamp > '-infinity'::timestamp with time zone))) AND (next_event_no IS NULL)))),
    CONSTRAINT price_not_negative CHECK ((price >= (0)::numeric))
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s ATTACH PARTITION obanalytics.level3_02006s201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');
ALTER TABLE ONLY obanalytics.level3_02006s201910 ALTER COLUMN microtimestamp SET STATISTICS 1000;


ALTER TABLE obanalytics.level3_02006s201910 OWNER TO "ob-analytics";

--
-- Name: level3_eras; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.level3_eras (
    era timestamp with time zone NOT NULL,
    pair_id smallint NOT NULL,
    exchange_id smallint NOT NULL,
    level1 timestamp with time zone,
    level2 timestamp with time zone,
    level3 timestamp with time zone
);


ALTER TABLE obanalytics.level3_eras OWNER TO "ob-analytics";

--
-- Name: COLUMN level3_eras.level1; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON COLUMN obanalytics.level3_eras.level1 IS 'A microtimestamp of the latest calculated level1 event in this era ';


--
-- Name: level3_eras_bitfinex; Type: VIEW; Schema: obanalytics; Owner: ob-analytics
--

CREATE VIEW obanalytics.level3_eras_bitfinex AS
 SELECT level3_eras.era,
    level3_eras.pair_id,
    level3_eras.exchange_id
   FROM obanalytics.level3_eras
  WHERE (level3_eras.exchange_id = ( SELECT exchanges.exchange_id
           FROM obanalytics.exchanges
          WHERE (exchanges.exchange = 'bitfinex'::text)));


ALTER TABLE obanalytics.level3_eras_bitfinex OWNER TO "ob-analytics";

--
-- Name: level3_eras_bitstamp; Type: VIEW; Schema: obanalytics; Owner: ob-analytics
--

CREATE VIEW obanalytics.level3_eras_bitstamp AS
 SELECT level3_eras.era,
    level3_eras.pair_id,
    level3_eras.exchange_id
   FROM obanalytics.level3_eras
  WHERE (level3_eras.exchange_id = ( SELECT exchanges.exchange_id
           FROM obanalytics.exchanges
          WHERE (exchanges.exchange = 'bitstamp'::text)));


ALTER TABLE obanalytics.level3_eras_bitstamp OWNER TO "ob-analytics";

--
-- Name: matches_bitfinex; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitfinex (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.matches ATTACH PARTITION obanalytics.matches_bitfinex FOR VALUES IN ('1');


ALTER TABLE obanalytics.matches_bitfinex OWNER TO "ob-analytics";

--
-- Name: matches_bitfinex_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitfinex_btcusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitfinex ATTACH PARTITION obanalytics.matches_bitfinex_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.matches_bitfinex_btcusd OWNER TO "ob-analytics";

--
-- Name: matches_01001201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201902 OWNER TO "ob-analytics";

--
-- Name: matches_01001201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201903 OWNER TO "ob-analytics";

--
-- Name: matches_01001201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201904 OWNER TO "ob-analytics";

--
-- Name: matches_01001201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201905 OWNER TO "ob-analytics";

--
-- Name: matches_01001201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201906 OWNER TO "ob-analytics";

--
-- Name: matches_01001201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201907 OWNER TO "ob-analytics";

--
-- Name: matches_01001201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201908 OWNER TO "ob-analytics";

--
-- Name: matches_01001201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201909 OWNER TO "ob-analytics";

--
-- Name: matches_01001201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01001201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_btcusd ATTACH PARTITION obanalytics.matches_01001201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01001201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitfinex_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitfinex_ltcusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitfinex ATTACH PARTITION obanalytics.matches_bitfinex_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.matches_bitfinex_ltcusd OWNER TO "ob-analytics";

--
-- Name: matches_01002201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201902 OWNER TO "ob-analytics";

--
-- Name: matches_01002201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201903 OWNER TO "ob-analytics";

--
-- Name: matches_01002201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201904 OWNER TO "ob-analytics";

--
-- Name: matches_01002201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201905 OWNER TO "ob-analytics";

--
-- Name: matches_01002201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201906 OWNER TO "ob-analytics";

--
-- Name: matches_01002201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201907 OWNER TO "ob-analytics";

--
-- Name: matches_01002201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201908 OWNER TO "ob-analytics";

--
-- Name: matches_01002201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201909 OWNER TO "ob-analytics";

--
-- Name: matches_01002201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01002201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ltcusd ATTACH PARTITION obanalytics.matches_01002201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01002201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitfinex_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitfinex_ethusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitfinex ATTACH PARTITION obanalytics.matches_bitfinex_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.matches_bitfinex_ethusd OWNER TO "ob-analytics";

--
-- Name: matches_01003201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201902 OWNER TO "ob-analytics";

--
-- Name: matches_01003201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201903 OWNER TO "ob-analytics";

--
-- Name: matches_01003201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201904 OWNER TO "ob-analytics";

--
-- Name: matches_01003201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201905 OWNER TO "ob-analytics";

--
-- Name: matches_01003201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201906 OWNER TO "ob-analytics";

--
-- Name: matches_01003201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201907 OWNER TO "ob-analytics";

--
-- Name: matches_01003201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201908 OWNER TO "ob-analytics";

--
-- Name: matches_01003201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201909 OWNER TO "ob-analytics";

--
-- Name: matches_01003201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01003201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_ethusd ATTACH PARTITION obanalytics.matches_01003201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01003201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitfinex_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitfinex_xrpusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitfinex ATTACH PARTITION obanalytics.matches_bitfinex_xrpusd FOR VALUES IN ('4');


ALTER TABLE obanalytics.matches_bitfinex_xrpusd OWNER TO "ob-analytics";

--
-- Name: matches_01004201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_01004201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 1 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitfinex_xrpusd ATTACH PARTITION obanalytics.matches_01004201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_01004201902 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY LIST (pair_id);
ALTER TABLE ONLY obanalytics.matches ATTACH PARTITION obanalytics.matches_bitstamp FOR VALUES IN ('2');


ALTER TABLE obanalytics.matches_bitstamp OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_btcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_btcusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_btcusd FOR VALUES IN ('1');


ALTER TABLE obanalytics.matches_bitstamp_btcusd OWNER TO "ob-analytics";

--
-- Name: matches_02001201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201901 OWNER TO "ob-analytics";

--
-- Name: matches_02001201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_enabled='true', autovacuum_vacuum_scale_factor='0.0', autovacuum_analyze_scale_factor='0.0', autovacuum_analyze_threshold='10000', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201902 OWNER TO "ob-analytics";

--
-- Name: matches_02001201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201903 OWNER TO "ob-analytics";

--
-- Name: matches_02001201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201904 OWNER TO "ob-analytics";

--
-- Name: matches_02001201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201905 OWNER TO "ob-analytics";

--
-- Name: matches_02001201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201906 OWNER TO "ob-analytics";

--
-- Name: matches_02001201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201907 OWNER TO "ob-analytics";

--
-- Name: matches_02001201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201908 OWNER TO "ob-analytics";

--
-- Name: matches_02001201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201909 OWNER TO "ob-analytics";

--
-- Name: matches_02001201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02001201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 1 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btcusd ATTACH PARTITION obanalytics.matches_02001201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02001201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_ltcusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_ltcusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_ltcusd FOR VALUES IN ('2');


ALTER TABLE obanalytics.matches_bitstamp_ltcusd OWNER TO "ob-analytics";

--
-- Name: matches_02002201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201901 OWNER TO "ob-analytics";

--
-- Name: matches_02002201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201902 OWNER TO "ob-analytics";

--
-- Name: matches_02002201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201903 OWNER TO "ob-analytics";

--
-- Name: matches_02002201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201904 OWNER TO "ob-analytics";

--
-- Name: matches_02002201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201905 OWNER TO "ob-analytics";

--
-- Name: matches_02002201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201906 OWNER TO "ob-analytics";

--
-- Name: matches_02002201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201907 OWNER TO "ob-analytics";

--
-- Name: matches_02002201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201908 OWNER TO "ob-analytics";

--
-- Name: matches_02002201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201909 OWNER TO "ob-analytics";

--
-- Name: matches_02002201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02002201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 2 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ltcusd ATTACH PARTITION obanalytics.matches_02002201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02002201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_ethusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_ethusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_ethusd FOR VALUES IN ('3');


ALTER TABLE obanalytics.matches_bitstamp_ethusd OWNER TO "ob-analytics";

--
-- Name: matches_02003201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201901 OWNER TO "ob-analytics";

--
-- Name: matches_02003201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201902 OWNER TO "ob-analytics";

--
-- Name: matches_02003201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201903 OWNER TO "ob-analytics";

--
-- Name: matches_02003201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201904 OWNER TO "ob-analytics";

--
-- Name: matches_02003201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201905 OWNER TO "ob-analytics";

--
-- Name: matches_02003201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201906 OWNER TO "ob-analytics";

--
-- Name: matches_02003201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201907 OWNER TO "ob-analytics";

--
-- Name: matches_02003201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201908 OWNER TO "ob-analytics";

--
-- Name: matches_02003201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201909 OWNER TO "ob-analytics";

--
-- Name: matches_02003201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02003201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 3 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_ethusd ATTACH PARTITION obanalytics.matches_02003201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02003201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_xrpusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_xrpusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_xrpusd FOR VALUES IN ('4');


ALTER TABLE obanalytics.matches_bitstamp_xrpusd OWNER TO "ob-analytics";

--
-- Name: matches_02004201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201901 OWNER TO "ob-analytics";

--
-- Name: matches_02004201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201902 OWNER TO "ob-analytics";

--
-- Name: matches_02004201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201903 OWNER TO "ob-analytics";

--
-- Name: matches_02004201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201904 OWNER TO "ob-analytics";

--
-- Name: matches_02004201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201905 OWNER TO "ob-analytics";

--
-- Name: matches_02004201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201906 OWNER TO "ob-analytics";

--
-- Name: matches_02004201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201907 OWNER TO "ob-analytics";

--
-- Name: matches_02004201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201908 OWNER TO "ob-analytics";

--
-- Name: matches_02004201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201909 OWNER TO "ob-analytics";

--
-- Name: matches_02004201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02004201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 4 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_xrpusd ATTACH PARTITION obanalytics.matches_02004201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02004201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_bchusd; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_bchusd (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_bchusd FOR VALUES IN ('5');


ALTER TABLE obanalytics.matches_bitstamp_bchusd OWNER TO "ob-analytics";

--
-- Name: matches_02005201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201901 OWNER TO "ob-analytics";

--
-- Name: matches_02005201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201902 OWNER TO "ob-analytics";

--
-- Name: matches_02005201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201903 OWNER TO "ob-analytics";

--
-- Name: matches_02005201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201904 OWNER TO "ob-analytics";

--
-- Name: matches_02005201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201905 OWNER TO "ob-analytics";

--
-- Name: matches_02005201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201906 OWNER TO "ob-analytics";

--
-- Name: matches_02005201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201907 OWNER TO "ob-analytics";

--
-- Name: matches_02005201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201908 OWNER TO "ob-analytics";

--
-- Name: matches_02005201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201909 OWNER TO "ob-analytics";

--
-- Name: matches_02005201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02005201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 5 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_bchusd ATTACH PARTITION obanalytics.matches_02005201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02005201910 OWNER TO "ob-analytics";

--
-- Name: matches_bitstamp_btceur; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_bitstamp_btceur (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
PARTITION BY RANGE (microtimestamp);
ALTER TABLE ONLY obanalytics.matches_bitstamp ATTACH PARTITION obanalytics.matches_bitstamp_btceur FOR VALUES IN ('6');


ALTER TABLE obanalytics.matches_bitstamp_btceur OWNER TO "ob-analytics";

--
-- Name: matches_02006201901; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201901 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201901 FOR VALUES FROM ('2019-01-01 00:00:00+03') TO ('2019-02-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201901 OWNER TO "ob-analytics";

--
-- Name: matches_02006201902; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201902 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201902 FOR VALUES FROM ('2019-02-01 00:00:00+03') TO ('2019-03-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201902 OWNER TO "ob-analytics";

--
-- Name: matches_02006201903; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201903 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201903 FOR VALUES FROM ('2019-03-01 00:00:00+03') TO ('2019-04-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201903 OWNER TO "ob-analytics";

--
-- Name: matches_02006201904; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201904 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201904 FOR VALUES FROM ('2019-04-01 00:00:00+03') TO ('2019-05-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201904 OWNER TO "ob-analytics";

--
-- Name: matches_02006201905; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201905 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201905 FOR VALUES FROM ('2019-05-01 00:00:00+03') TO ('2019-06-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201905 OWNER TO "ob-analytics";

--
-- Name: matches_02006201906; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201906 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201906 FOR VALUES FROM ('2019-06-01 00:00:00+03') TO ('2019-07-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201906 OWNER TO "ob-analytics";

--
-- Name: matches_02006201907; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201907 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201907 FOR VALUES FROM ('2019-07-01 00:00:00+03') TO ('2019-08-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201907 OWNER TO "ob-analytics";

--
-- Name: matches_02006201908; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201908 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201908 FOR VALUES FROM ('2019-08-01 00:00:00+03') TO ('2019-09-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201908 OWNER TO "ob-analytics";

--
-- Name: matches_02006201909; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201909 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201909 FOR VALUES FROM ('2019-09-01 00:00:00+03') TO ('2019-10-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201909 OWNER TO "ob-analytics";

--
-- Name: matches_02006201910; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.matches_02006201910 (
    amount numeric NOT NULL,
    price numeric NOT NULL,
    side character(1) NOT NULL,
    microtimestamp timestamp with time zone NOT NULL,
    buy_order_id bigint,
    buy_event_no integer,
    sell_order_id bigint,
    sell_event_no integer,
    buy_match_rule smallint,
    sell_match_rule smallint,
    local_timestamp timestamp with time zone,
    exchange_id smallint DEFAULT 2 NOT NULL,
    pair_id smallint DEFAULT 6 NOT NULL,
    exchange_side character(1),
    exchange_trade_id bigint,
    exchange_microtimestamp timestamp with time zone
)
WITH (autovacuum_vacuum_scale_factor='0.0', autovacuum_vacuum_threshold='10000');
ALTER TABLE ONLY obanalytics.matches_bitstamp_btceur ATTACH PARTITION obanalytics.matches_02006201910 FOR VALUES FROM ('2019-10-01 00:00:00+03') TO ('2019-11-01 00:00:00+03');


ALTER TABLE obanalytics.matches_02006201910 OWNER TO "ob-analytics";

--
-- Name: pairs; Type: TABLE; Schema: obanalytics; Owner: ob-analytics
--

CREATE TABLE obanalytics.pairs (
    pair_id smallint NOT NULL,
    pair text NOT NULL,
    "R0" smallint,
    "P0" smallint,
    "P1" smallint,
    "P2" smallint,
    "P3" smallint,
    fmu smallint NOT NULL
);


ALTER TABLE obanalytics.pairs OWNER TO "ob-analytics";

--
-- Name: TABLE pairs; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON TABLE obanalytics.pairs IS 'pair_id values are meaningful: they are used in the names of partition tables';


--
-- Name: COLUMN pairs."R0"; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON COLUMN obanalytics.pairs."R0" IS '-log10 of Fractional Monetary Unit (i.e. 2 for 0.01 of USD or 8 for 0.00000001 of Bitcoin) for the secopnd currency in the pair (i.e. USD in BTCUSD). To be used for rounding of floating-point prices';


--
-- Name: COLUMN pairs.fmu; Type: COMMENT; Schema: obanalytics; Owner: ob-analytics
--

COMMENT ON COLUMN obanalytics.pairs.fmu IS '-log10 of Fractional Monetary Unit (i.e. 2 for 0.01 of USD or 8 for 0.00000001 of Bitcoin) for the first currency in the pair (i.e. BTC in BTCUSD). To be used for rounding of floating-point quantities ';


--
-- Name: exchanges exchanges_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.exchanges
    ADD CONSTRAINT exchanges_pkey PRIMARY KEY (exchange_id);


--
-- Name: exchanges exchanges_unique_exchange; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.exchanges
    ADD CONSTRAINT exchanges_unique_exchange UNIQUE (exchange);


--
-- Name: level1_01001201903 level1_01001201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201903
    ADD CONSTRAINT level1_01001201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201904 level1_01001201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201904
    ADD CONSTRAINT level1_01001201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201905 level1_01001201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201905
    ADD CONSTRAINT level1_01001201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201906 level1_01001201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201906
    ADD CONSTRAINT level1_01001201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201907 level1_01001201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201907
    ADD CONSTRAINT level1_01001201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201908 level1_01001201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201908
    ADD CONSTRAINT level1_01001201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201909 level1_01001201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201909
    ADD CONSTRAINT level1_01001201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01001201910 level1_01001201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01001201910
    ADD CONSTRAINT level1_01001201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201903 level1_01002201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201903
    ADD CONSTRAINT level1_01002201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201904 level1_01002201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201904
    ADD CONSTRAINT level1_01002201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201905 level1_01002201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201905
    ADD CONSTRAINT level1_01002201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201906 level1_01002201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201906
    ADD CONSTRAINT level1_01002201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201907 level1_01002201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201907
    ADD CONSTRAINT level1_01002201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201908 level1_01002201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201908
    ADD CONSTRAINT level1_01002201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201909 level1_01002201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201909
    ADD CONSTRAINT level1_01002201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01002201910 level1_01002201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01002201910
    ADD CONSTRAINT level1_01002201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201903 level1_01003201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201903
    ADD CONSTRAINT level1_01003201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201904 level1_01003201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201904
    ADD CONSTRAINT level1_01003201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201905 level1_01003201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201905
    ADD CONSTRAINT level1_01003201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201906 level1_01003201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201906
    ADD CONSTRAINT level1_01003201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201907 level1_01003201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201907
    ADD CONSTRAINT level1_01003201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201908 level1_01003201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201908
    ADD CONSTRAINT level1_01003201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201909 level1_01003201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201909
    ADD CONSTRAINT level1_01003201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_01003201910 level1_01003201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_01003201910
    ADD CONSTRAINT level1_01003201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201901 level1_02001201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201901
    ADD CONSTRAINT level1_02001201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201902 level1_02001201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201902
    ADD CONSTRAINT level1_02001201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201903 level1_02001201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201903
    ADD CONSTRAINT level1_02001201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201904 level1_02001201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201904
    ADD CONSTRAINT level1_02001201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201905 level1_02001201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201905
    ADD CONSTRAINT level1_02001201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201906 level1_02001201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201906
    ADD CONSTRAINT level1_02001201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201907 level1_02001201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201907
    ADD CONSTRAINT level1_02001201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201908 level1_02001201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201908
    ADD CONSTRAINT level1_02001201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201909 level1_02001201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201909
    ADD CONSTRAINT level1_02001201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02001201910 level1_02001201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02001201910
    ADD CONSTRAINT level1_02001201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201901 level1_02002201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201901
    ADD CONSTRAINT level1_02002201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201902 level1_02002201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201902
    ADD CONSTRAINT level1_02002201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201903 level1_02002201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201903
    ADD CONSTRAINT level1_02002201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201904 level1_02002201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201904
    ADD CONSTRAINT level1_02002201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201905 level1_02002201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201905
    ADD CONSTRAINT level1_02002201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201906 level1_02002201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201906
    ADD CONSTRAINT level1_02002201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201907 level1_02002201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201907
    ADD CONSTRAINT level1_02002201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201908 level1_02002201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201908
    ADD CONSTRAINT level1_02002201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201909 level1_02002201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201909
    ADD CONSTRAINT level1_02002201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02002201910 level1_02002201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02002201910
    ADD CONSTRAINT level1_02002201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201901 level1_02003201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201901
    ADD CONSTRAINT level1_02003201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201902 level1_02003201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201902
    ADD CONSTRAINT level1_02003201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201903 level1_02003201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201903
    ADD CONSTRAINT level1_02003201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201904 level1_02003201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201904
    ADD CONSTRAINT level1_02003201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201905 level1_02003201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201905
    ADD CONSTRAINT level1_02003201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201906 level1_02003201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201906
    ADD CONSTRAINT level1_02003201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201907 level1_02003201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201907
    ADD CONSTRAINT level1_02003201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201908 level1_02003201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201908
    ADD CONSTRAINT level1_02003201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201909 level1_02003201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201909
    ADD CONSTRAINT level1_02003201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02003201910 level1_02003201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02003201910
    ADD CONSTRAINT level1_02003201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201901 level1_02004201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201901
    ADD CONSTRAINT level1_02004201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201902 level1_02004201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201902
    ADD CONSTRAINT level1_02004201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201903 level1_02004201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201903
    ADD CONSTRAINT level1_02004201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201904 level1_02004201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201904
    ADD CONSTRAINT level1_02004201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201905 level1_02004201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201905
    ADD CONSTRAINT level1_02004201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201906 level1_02004201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201906
    ADD CONSTRAINT level1_02004201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201907 level1_02004201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201907
    ADD CONSTRAINT level1_02004201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201908 level1_02004201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201908
    ADD CONSTRAINT level1_02004201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201909 level1_02004201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201909
    ADD CONSTRAINT level1_02004201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02004201910 level1_02004201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02004201910
    ADD CONSTRAINT level1_02004201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201901 level1_02005201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201901
    ADD CONSTRAINT level1_02005201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201902 level1_02005201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201902
    ADD CONSTRAINT level1_02005201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201903 level1_02005201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201903
    ADD CONSTRAINT level1_02005201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201904 level1_02005201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201904
    ADD CONSTRAINT level1_02005201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201905 level1_02005201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201905
    ADD CONSTRAINT level1_02005201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201906 level1_02005201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201906
    ADD CONSTRAINT level1_02005201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201907 level1_02005201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201907
    ADD CONSTRAINT level1_02005201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201908 level1_02005201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201908
    ADD CONSTRAINT level1_02005201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201909 level1_02005201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201909
    ADD CONSTRAINT level1_02005201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02005201910 level1_02005201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02005201910
    ADD CONSTRAINT level1_02005201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201901 level1_02006201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201901
    ADD CONSTRAINT level1_02006201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201902 level1_02006201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201902
    ADD CONSTRAINT level1_02006201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201903 level1_02006201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201903
    ADD CONSTRAINT level1_02006201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201904 level1_02006201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201904
    ADD CONSTRAINT level1_02006201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201905 level1_02006201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201905
    ADD CONSTRAINT level1_02006201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201906 level1_02006201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201906
    ADD CONSTRAINT level1_02006201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201907 level1_02006201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201907
    ADD CONSTRAINT level1_02006201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201908 level1_02006201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201908
    ADD CONSTRAINT level1_02006201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201909 level1_02006201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201909
    ADD CONSTRAINT level1_02006201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02006201910 level1_02006201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02006201910
    ADD CONSTRAINT level1_02006201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level1_02007201903 level1_02007201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level1_02007201903
    ADD CONSTRAINT level1_02007201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001p0201903 level2_01001p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001p0201903
    ADD CONSTRAINT level2_01001p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201903 level2_01001r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201903
    ADD CONSTRAINT level2_01001r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201904 level2_01001r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201904
    ADD CONSTRAINT level2_01001r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201905 level2_01001r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201905
    ADD CONSTRAINT level2_01001r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201906 level2_01001r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201906
    ADD CONSTRAINT level2_01001r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201907 level2_01001r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201907
    ADD CONSTRAINT level2_01001r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201908 level2_01001r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201908
    ADD CONSTRAINT level2_01001r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201909 level2_01001r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201909
    ADD CONSTRAINT level2_01001r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01001r0201910 level2_01001r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01001r0201910
    ADD CONSTRAINT level2_01001r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002p0201903 level2_01002p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002p0201903
    ADD CONSTRAINT level2_01002p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201903 level2_01002r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201903
    ADD CONSTRAINT level2_01002r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201904 level2_01002r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201904
    ADD CONSTRAINT level2_01002r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201905 level2_01002r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201905
    ADD CONSTRAINT level2_01002r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201906 level2_01002r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201906
    ADD CONSTRAINT level2_01002r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201907 level2_01002r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201907
    ADD CONSTRAINT level2_01002r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201908 level2_01002r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201908
    ADD CONSTRAINT level2_01002r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201909 level2_01002r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201909
    ADD CONSTRAINT level2_01002r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01002r0201910 level2_01002r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01002r0201910
    ADD CONSTRAINT level2_01002r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003p0201903 level2_01003p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003p0201903
    ADD CONSTRAINT level2_01003p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201903 level2_01003r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201903
    ADD CONSTRAINT level2_01003r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201904 level2_01003r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201904
    ADD CONSTRAINT level2_01003r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201905 level2_01003r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201905
    ADD CONSTRAINT level2_01003r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201906 level2_01003r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201906
    ADD CONSTRAINT level2_01003r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201907 level2_01003r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201907
    ADD CONSTRAINT level2_01003r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201908 level2_01003r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201908
    ADD CONSTRAINT level2_01003r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201909 level2_01003r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201909
    ADD CONSTRAINT level2_01003r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_01003r0201910 level2_01003r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_01003r0201910
    ADD CONSTRAINT level2_01003r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001p0201903 level2_02001p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001p0201903
    ADD CONSTRAINT level2_02001p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001p0201904 level2_02001p0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001p0201904
    ADD CONSTRAINT level2_02001p0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201901 level2_02001r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201901
    ADD CONSTRAINT level2_02001r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201902 level2_02001r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201902
    ADD CONSTRAINT level2_02001r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201903 level2_02001r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201903
    ADD CONSTRAINT level2_02001r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201904 level2_02001r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201904
    ADD CONSTRAINT level2_02001r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201905 level2_02001r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201905
    ADD CONSTRAINT level2_02001r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201906 level2_02001r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201906
    ADD CONSTRAINT level2_02001r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201907 level2_02001r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201907
    ADD CONSTRAINT level2_02001r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201908 level2_02001r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201908
    ADD CONSTRAINT level2_02001r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201909 level2_02001r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201909
    ADD CONSTRAINT level2_02001r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02001r0201910 level2_02001r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02001r0201910
    ADD CONSTRAINT level2_02001r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002p0201903 level2_02002p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002p0201903
    ADD CONSTRAINT level2_02002p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201901 level2_02002r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201901
    ADD CONSTRAINT level2_02002r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201902 level2_02002r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201902
    ADD CONSTRAINT level2_02002r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201903 level2_02002r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201903
    ADD CONSTRAINT level2_02002r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201904 level2_02002r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201904
    ADD CONSTRAINT level2_02002r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201905 level2_02002r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201905
    ADD CONSTRAINT level2_02002r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201906 level2_02002r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201906
    ADD CONSTRAINT level2_02002r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201907 level2_02002r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201907
    ADD CONSTRAINT level2_02002r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201908 level2_02002r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201908
    ADD CONSTRAINT level2_02002r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201909 level2_02002r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201909
    ADD CONSTRAINT level2_02002r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02002r0201910 level2_02002r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02002r0201910
    ADD CONSTRAINT level2_02002r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003p0201903 level2_02003p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003p0201903
    ADD CONSTRAINT level2_02003p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201901 level2_02003r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201901
    ADD CONSTRAINT level2_02003r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201902 level2_02003r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201902
    ADD CONSTRAINT level2_02003r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201903 level2_02003r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201903
    ADD CONSTRAINT level2_02003r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201904 level2_02003r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201904
    ADD CONSTRAINT level2_02003r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201905 level2_02003r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201905
    ADD CONSTRAINT level2_02003r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201906 level2_02003r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201906
    ADD CONSTRAINT level2_02003r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201907 level2_02003r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201907
    ADD CONSTRAINT level2_02003r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201908 level2_02003r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201908
    ADD CONSTRAINT level2_02003r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201909 level2_02003r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201909
    ADD CONSTRAINT level2_02003r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02003r0201910 level2_02003r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02003r0201910
    ADD CONSTRAINT level2_02003r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004p0201903 level2_02004p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004p0201903
    ADD CONSTRAINT level2_02004p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201901 level2_02004r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201901
    ADD CONSTRAINT level2_02004r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201902 level2_02004r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201902
    ADD CONSTRAINT level2_02004r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201903 level2_02004r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201903
    ADD CONSTRAINT level2_02004r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201904 level2_02004r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201904
    ADD CONSTRAINT level2_02004r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201905 level2_02004r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201905
    ADD CONSTRAINT level2_02004r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201906 level2_02004r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201906
    ADD CONSTRAINT level2_02004r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201907 level2_02004r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201907
    ADD CONSTRAINT level2_02004r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201908 level2_02004r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201908
    ADD CONSTRAINT level2_02004r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201909 level2_02004r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201909
    ADD CONSTRAINT level2_02004r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02004r0201910 level2_02004r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02004r0201910
    ADD CONSTRAINT level2_02004r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005p0201903 level2_02005p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005p0201903
    ADD CONSTRAINT level2_02005p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201901 level2_02005r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201901
    ADD CONSTRAINT level2_02005r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201902 level2_02005r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201902
    ADD CONSTRAINT level2_02005r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201903 level2_02005r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201903
    ADD CONSTRAINT level2_02005r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201904 level2_02005r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201904
    ADD CONSTRAINT level2_02005r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201905 level2_02005r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201905
    ADD CONSTRAINT level2_02005r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201906 level2_02005r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201906
    ADD CONSTRAINT level2_02005r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201907 level2_02005r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201907
    ADD CONSTRAINT level2_02005r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201908 level2_02005r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201908
    ADD CONSTRAINT level2_02005r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201909 level2_02005r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201909
    ADD CONSTRAINT level2_02005r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02005r0201910 level2_02005r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02005r0201910
    ADD CONSTRAINT level2_02005r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006p0201903 level2_02006p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006p0201903
    ADD CONSTRAINT level2_02006p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201901 level2_02006r0201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201901
    ADD CONSTRAINT level2_02006r0201901_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201902 level2_02006r0201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201902
    ADD CONSTRAINT level2_02006r0201902_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201903 level2_02006r0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201903
    ADD CONSTRAINT level2_02006r0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201904 level2_02006r0201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201904
    ADD CONSTRAINT level2_02006r0201904_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201905 level2_02006r0201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201905
    ADD CONSTRAINT level2_02006r0201905_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201906 level2_02006r0201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201906
    ADD CONSTRAINT level2_02006r0201906_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201907 level2_02006r0201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201907
    ADD CONSTRAINT level2_02006r0201907_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201908 level2_02006r0201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201908
    ADD CONSTRAINT level2_02006r0201908_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201909 level2_02006r0201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201909
    ADD CONSTRAINT level2_02006r0201909_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02006r0201910 level2_02006r0201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02006r0201910
    ADD CONSTRAINT level2_02006r0201910_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level2_02007p0201903 level2_02007p0201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level2_02007p0201903
    ADD CONSTRAINT level2_02007p0201903_pkey PRIMARY KEY (microtimestamp);


--
-- Name: level3_01001b201903 level3_01001b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201903
    ADD CONSTRAINT level3_01001b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201903 level3_01001b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201903
    ADD CONSTRAINT level3_01001b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201904 level3_01001b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201904
    ADD CONSTRAINT level3_01001b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201904 level3_01001b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201904
    ADD CONSTRAINT level3_01001b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201905 level3_01001b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201905
    ADD CONSTRAINT level3_01001b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201905 level3_01001b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201905
    ADD CONSTRAINT level3_01001b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201906 level3_01001b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201906
    ADD CONSTRAINT level3_01001b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201906 level3_01001b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201906
    ADD CONSTRAINT level3_01001b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201907 level3_01001b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201907
    ADD CONSTRAINT level3_01001b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201907 level3_01001b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201907
    ADD CONSTRAINT level3_01001b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201908 level3_01001b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201908
    ADD CONSTRAINT level3_01001b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201908 level3_01001b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201908
    ADD CONSTRAINT level3_01001b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201909 level3_01001b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201909
    ADD CONSTRAINT level3_01001b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201909 level3_01001b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201909
    ADD CONSTRAINT level3_01001b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201910 level3_01001b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201910
    ADD CONSTRAINT level3_01001b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201910 level3_01001b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201910
    ADD CONSTRAINT level3_01001b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201903 level3_01001s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201903
    ADD CONSTRAINT level3_01001s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201903 level3_01001s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201903
    ADD CONSTRAINT level3_01001s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201904 level3_01001s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201904
    ADD CONSTRAINT level3_01001s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201904 level3_01001s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201904
    ADD CONSTRAINT level3_01001s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201905 level3_01001s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201905
    ADD CONSTRAINT level3_01001s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201905 level3_01001s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201905
    ADD CONSTRAINT level3_01001s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201906 level3_01001s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201906
    ADD CONSTRAINT level3_01001s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201906 level3_01001s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201906
    ADD CONSTRAINT level3_01001s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201907 level3_01001s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201907
    ADD CONSTRAINT level3_01001s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201907 level3_01001s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201907
    ADD CONSTRAINT level3_01001s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201908 level3_01001s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201908
    ADD CONSTRAINT level3_01001s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201908 level3_01001s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201908
    ADD CONSTRAINT level3_01001s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201909 level3_01001s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201909
    ADD CONSTRAINT level3_01001s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201909 level3_01001s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201909
    ADD CONSTRAINT level3_01001s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201910 level3_01001s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201910
    ADD CONSTRAINT level3_01001s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201910 level3_01001s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201910
    ADD CONSTRAINT level3_01001s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201903 level3_01002b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201903
    ADD CONSTRAINT level3_01002b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201903 level3_01002b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201903
    ADD CONSTRAINT level3_01002b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201904 level3_01002b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201904
    ADD CONSTRAINT level3_01002b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201904 level3_01002b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201904
    ADD CONSTRAINT level3_01002b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201905 level3_01002b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201905
    ADD CONSTRAINT level3_01002b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201905 level3_01002b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201905
    ADD CONSTRAINT level3_01002b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201906 level3_01002b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201906
    ADD CONSTRAINT level3_01002b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201906 level3_01002b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201906
    ADD CONSTRAINT level3_01002b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201907 level3_01002b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201907
    ADD CONSTRAINT level3_01002b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201907 level3_01002b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201907
    ADD CONSTRAINT level3_01002b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201908 level3_01002b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201908
    ADD CONSTRAINT level3_01002b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201908 level3_01002b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201908
    ADD CONSTRAINT level3_01002b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201909 level3_01002b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201909
    ADD CONSTRAINT level3_01002b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201909 level3_01002b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201909
    ADD CONSTRAINT level3_01002b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201910 level3_01002b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201910
    ADD CONSTRAINT level3_01002b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201910 level3_01002b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201910
    ADD CONSTRAINT level3_01002b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201903 level3_01002s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201903
    ADD CONSTRAINT level3_01002s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201903 level3_01002s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201903
    ADD CONSTRAINT level3_01002s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201904 level3_01002s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201904
    ADD CONSTRAINT level3_01002s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201904 level3_01002s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201904
    ADD CONSTRAINT level3_01002s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201905 level3_01002s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201905
    ADD CONSTRAINT level3_01002s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201905 level3_01002s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201905
    ADD CONSTRAINT level3_01002s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201906 level3_01002s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201906
    ADD CONSTRAINT level3_01002s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201906 level3_01002s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201906
    ADD CONSTRAINT level3_01002s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201907 level3_01002s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201907
    ADD CONSTRAINT level3_01002s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201907 level3_01002s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201907
    ADD CONSTRAINT level3_01002s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201908 level3_01002s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201908
    ADD CONSTRAINT level3_01002s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201908 level3_01002s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201908
    ADD CONSTRAINT level3_01002s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201909 level3_01002s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201909
    ADD CONSTRAINT level3_01002s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201909 level3_01002s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201909
    ADD CONSTRAINT level3_01002s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201910 level3_01002s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201910
    ADD CONSTRAINT level3_01002s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201910 level3_01002s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201910
    ADD CONSTRAINT level3_01002s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201903 level3_01003b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201903
    ADD CONSTRAINT level3_01003b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201903 level3_01003b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201903
    ADD CONSTRAINT level3_01003b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201904 level3_01003b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201904
    ADD CONSTRAINT level3_01003b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201904 level3_01003b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201904
    ADD CONSTRAINT level3_01003b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201905 level3_01003b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201905
    ADD CONSTRAINT level3_01003b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201905 level3_01003b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201905
    ADD CONSTRAINT level3_01003b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201906 level3_01003b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201906
    ADD CONSTRAINT level3_01003b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201906 level3_01003b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201906
    ADD CONSTRAINT level3_01003b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201907 level3_01003b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201907
    ADD CONSTRAINT level3_01003b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201907 level3_01003b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201907
    ADD CONSTRAINT level3_01003b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201908 level3_01003b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201908
    ADD CONSTRAINT level3_01003b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201908 level3_01003b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201908
    ADD CONSTRAINT level3_01003b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201909 level3_01003b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201909
    ADD CONSTRAINT level3_01003b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201909 level3_01003b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201909
    ADD CONSTRAINT level3_01003b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201910 level3_01003b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201910
    ADD CONSTRAINT level3_01003b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201910 level3_01003b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201910
    ADD CONSTRAINT level3_01003b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201903 level3_01003s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201903
    ADD CONSTRAINT level3_01003s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201903 level3_01003s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201903
    ADD CONSTRAINT level3_01003s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201904 level3_01003s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201904
    ADD CONSTRAINT level3_01003s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201904 level3_01003s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201904
    ADD CONSTRAINT level3_01003s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201905 level3_01003s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201905
    ADD CONSTRAINT level3_01003s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201905 level3_01003s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201905
    ADD CONSTRAINT level3_01003s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201906 level3_01003s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201906
    ADD CONSTRAINT level3_01003s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201906 level3_01003s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201906
    ADD CONSTRAINT level3_01003s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201907 level3_01003s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201907
    ADD CONSTRAINT level3_01003s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201907 level3_01003s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201907
    ADD CONSTRAINT level3_01003s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201908 level3_01003s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201908
    ADD CONSTRAINT level3_01003s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201908 level3_01003s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201908
    ADD CONSTRAINT level3_01003s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201909 level3_01003s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201909
    ADD CONSTRAINT level3_01003s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201909 level3_01003s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201909
    ADD CONSTRAINT level3_01003s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201910 level3_01003s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201910
    ADD CONSTRAINT level3_01003s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201910 level3_01003s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201910
    ADD CONSTRAINT level3_01003s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004b201902 level3_01004b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004b201902
    ADD CONSTRAINT level3_01004b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01004b201902 level3_01004b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004b201902
    ADD CONSTRAINT level3_01004b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004s201902 level3_01004s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004s201902
    ADD CONSTRAINT level3_01004s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01004s201902 level3_01004s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004s201902
    ADD CONSTRAINT level3_01004s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201902 level3_01b001201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201902
    ADD CONSTRAINT level3_01b001201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001b201902 level3_01b001201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201902
    ADD CONSTRAINT level3_01b001201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201902 level3_01b002201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201902
    ADD CONSTRAINT level3_01b002201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002b201902 level3_01b002201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201902
    ADD CONSTRAINT level3_01b002201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201902 level3_01b003201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201902
    ADD CONSTRAINT level3_01b003201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003b201902 level3_01b003201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201902
    ADD CONSTRAINT level3_01b003201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201902 level3_01s001201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201902
    ADD CONSTRAINT level3_01s001201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01001s201902 level3_01s001201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201902
    ADD CONSTRAINT level3_01s001201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201902 level3_01s002201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201902
    ADD CONSTRAINT level3_01s002201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01002s201902 level3_01s002201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201902
    ADD CONSTRAINT level3_01s002201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201902 level3_01s003201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201902
    ADD CONSTRAINT level3_01s003201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_01003s201902 level3_01s003201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201902
    ADD CONSTRAINT level3_01s003201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp
    ADD CONSTRAINT level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_btcusd level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd
    ADD CONSTRAINT level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_btcusd_b level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_b
    ADD CONSTRAINT level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201901 level3_02001b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201901
    ADD CONSTRAINT level3_02001b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201902 level3_02001b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201902
    ADD CONSTRAINT level3_02001b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201902 level3_02001b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201902
    ADD CONSTRAINT level3_02001b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201902 level3_02001b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201902
    ADD CONSTRAINT level3_02001b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201903 level3_02001b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201903
    ADD CONSTRAINT level3_02001b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201903 level3_02001b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201903
    ADD CONSTRAINT level3_02001b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201903 level3_02001b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201903
    ADD CONSTRAINT level3_02001b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201904 level3_02001b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201904
    ADD CONSTRAINT level3_02001b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201904 level3_02001b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201904
    ADD CONSTRAINT level3_02001b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201904 level3_02001b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201904
    ADD CONSTRAINT level3_02001b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201905 level3_02001b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201905
    ADD CONSTRAINT level3_02001b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201905 level3_02001b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201905
    ADD CONSTRAINT level3_02001b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201905 level3_02001b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201905
    ADD CONSTRAINT level3_02001b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201906 level3_02001b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201906
    ADD CONSTRAINT level3_02001b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201906 level3_02001b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201906
    ADD CONSTRAINT level3_02001b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201906 level3_02001b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201906
    ADD CONSTRAINT level3_02001b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201907 level3_02001b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201907
    ADD CONSTRAINT level3_02001b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201907 level3_02001b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201907
    ADD CONSTRAINT level3_02001b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201907 level3_02001b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201907
    ADD CONSTRAINT level3_02001b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201908 level3_02001b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201908
    ADD CONSTRAINT level3_02001b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201908 level3_02001b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201908
    ADD CONSTRAINT level3_02001b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201908 level3_02001b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201908
    ADD CONSTRAINT level3_02001b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201909 level3_02001b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201909
    ADD CONSTRAINT level3_02001b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201909 level3_02001b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201909
    ADD CONSTRAINT level3_02001b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201909 level3_02001b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201909
    ADD CONSTRAINT level3_02001b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201910 level3_02001b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201910
    ADD CONSTRAINT level3_02001b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201910 level3_02001b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201910
    ADD CONSTRAINT level3_02001b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001b201910 level3_02001b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201910
    ADD CONSTRAINT level3_02001b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_btcusd_s level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btcusd_s
    ADD CONSTRAINT level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201901 level3_02001s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201901
    ADD CONSTRAINT level3_02001s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201902 level3_02001s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201902
    ADD CONSTRAINT level3_02001s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201902 level3_02001s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201902
    ADD CONSTRAINT level3_02001s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201902 level3_02001s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201902
    ADD CONSTRAINT level3_02001s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201903 level3_02001s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201903
    ADD CONSTRAINT level3_02001s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201903 level3_02001s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201903
    ADD CONSTRAINT level3_02001s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201903 level3_02001s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201903
    ADD CONSTRAINT level3_02001s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201904 level3_02001s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201904
    ADD CONSTRAINT level3_02001s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201904 level3_02001s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201904
    ADD CONSTRAINT level3_02001s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201904 level3_02001s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201904
    ADD CONSTRAINT level3_02001s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201905 level3_02001s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201905
    ADD CONSTRAINT level3_02001s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201905 level3_02001s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201905
    ADD CONSTRAINT level3_02001s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201905 level3_02001s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201905
    ADD CONSTRAINT level3_02001s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201906 level3_02001s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201906
    ADD CONSTRAINT level3_02001s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201906 level3_02001s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201906
    ADD CONSTRAINT level3_02001s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201906 level3_02001s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201906
    ADD CONSTRAINT level3_02001s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201907 level3_02001s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201907
    ADD CONSTRAINT level3_02001s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201907 level3_02001s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201907
    ADD CONSTRAINT level3_02001s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201907 level3_02001s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201907
    ADD CONSTRAINT level3_02001s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201908 level3_02001s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201908
    ADD CONSTRAINT level3_02001s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201908 level3_02001s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201908
    ADD CONSTRAINT level3_02001s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201908 level3_02001s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201908
    ADD CONSTRAINT level3_02001s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201909 level3_02001s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201909
    ADD CONSTRAINT level3_02001s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201909 level3_02001s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201909
    ADD CONSTRAINT level3_02001s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201909 level3_02001s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201909
    ADD CONSTRAINT level3_02001s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201910 level3_02001s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201910
    ADD CONSTRAINT level3_02001s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201910 level3_02001s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201910
    ADD CONSTRAINT level3_02001s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201910 level3_02001s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201910
    ADD CONSTRAINT level3_02001s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_ltcusd level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd
    ADD CONSTRAINT level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_ltcusd_b level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_b
    ADD CONSTRAINT level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201901 level3_02002b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201901
    ADD CONSTRAINT level3_02002b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201901 level3_02002b201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201901
    ADD CONSTRAINT level3_02002b201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201901 level3_02002b201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201901
    ADD CONSTRAINT level3_02002b201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201902 level3_02002b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201902
    ADD CONSTRAINT level3_02002b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201902 level3_02002b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201902
    ADD CONSTRAINT level3_02002b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201902 level3_02002b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201902
    ADD CONSTRAINT level3_02002b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201903 level3_02002b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201903
    ADD CONSTRAINT level3_02002b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201903 level3_02002b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201903
    ADD CONSTRAINT level3_02002b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201903 level3_02002b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201903
    ADD CONSTRAINT level3_02002b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201904 level3_02002b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201904
    ADD CONSTRAINT level3_02002b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201904 level3_02002b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201904
    ADD CONSTRAINT level3_02002b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201904 level3_02002b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201904
    ADD CONSTRAINT level3_02002b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201905 level3_02002b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201905
    ADD CONSTRAINT level3_02002b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201905 level3_02002b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201905
    ADD CONSTRAINT level3_02002b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201905 level3_02002b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201905
    ADD CONSTRAINT level3_02002b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201906 level3_02002b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201906
    ADD CONSTRAINT level3_02002b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201906 level3_02002b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201906
    ADD CONSTRAINT level3_02002b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201906 level3_02002b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201906
    ADD CONSTRAINT level3_02002b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201907 level3_02002b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201907
    ADD CONSTRAINT level3_02002b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201907 level3_02002b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201907
    ADD CONSTRAINT level3_02002b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201907 level3_02002b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201907
    ADD CONSTRAINT level3_02002b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201908 level3_02002b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201908
    ADD CONSTRAINT level3_02002b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201908 level3_02002b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201908
    ADD CONSTRAINT level3_02002b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201908 level3_02002b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201908
    ADD CONSTRAINT level3_02002b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201909 level3_02002b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201909
    ADD CONSTRAINT level3_02002b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201909 level3_02002b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201909
    ADD CONSTRAINT level3_02002b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201909 level3_02002b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201909
    ADD CONSTRAINT level3_02002b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201910 level3_02002b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201910
    ADD CONSTRAINT level3_02002b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201910 level3_02002b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201910
    ADD CONSTRAINT level3_02002b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002b201910 level3_02002b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201910
    ADD CONSTRAINT level3_02002b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_ltcusd_s level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ltcusd_s
    ADD CONSTRAINT level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201901 level3_02002s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201901
    ADD CONSTRAINT level3_02002s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201901 level3_02002s201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201901
    ADD CONSTRAINT level3_02002s201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201901 level3_02002s201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201901
    ADD CONSTRAINT level3_02002s201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201902 level3_02002s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201902
    ADD CONSTRAINT level3_02002s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201902 level3_02002s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201902
    ADD CONSTRAINT level3_02002s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201902 level3_02002s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201902
    ADD CONSTRAINT level3_02002s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201903 level3_02002s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201903
    ADD CONSTRAINT level3_02002s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201903 level3_02002s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201903
    ADD CONSTRAINT level3_02002s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201903 level3_02002s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201903
    ADD CONSTRAINT level3_02002s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201904 level3_02002s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201904
    ADD CONSTRAINT level3_02002s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201904 level3_02002s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201904
    ADD CONSTRAINT level3_02002s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201904 level3_02002s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201904
    ADD CONSTRAINT level3_02002s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201905 level3_02002s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201905
    ADD CONSTRAINT level3_02002s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201905 level3_02002s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201905
    ADD CONSTRAINT level3_02002s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201905 level3_02002s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201905
    ADD CONSTRAINT level3_02002s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201906 level3_02002s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201906
    ADD CONSTRAINT level3_02002s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201906 level3_02002s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201906
    ADD CONSTRAINT level3_02002s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201906 level3_02002s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201906
    ADD CONSTRAINT level3_02002s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201907 level3_02002s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201907
    ADD CONSTRAINT level3_02002s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201907 level3_02002s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201907
    ADD CONSTRAINT level3_02002s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201907 level3_02002s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201907
    ADD CONSTRAINT level3_02002s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201908 level3_02002s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201908
    ADD CONSTRAINT level3_02002s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201908 level3_02002s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201908
    ADD CONSTRAINT level3_02002s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201908 level3_02002s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201908
    ADD CONSTRAINT level3_02002s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201909 level3_02002s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201909
    ADD CONSTRAINT level3_02002s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201909 level3_02002s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201909
    ADD CONSTRAINT level3_02002s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201909 level3_02002s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201909
    ADD CONSTRAINT level3_02002s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201910 level3_02002s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201910
    ADD CONSTRAINT level3_02002s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201910 level3_02002s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201910
    ADD CONSTRAINT level3_02002s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02002s201910 level3_02002s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201910
    ADD CONSTRAINT level3_02002s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_ethusd level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd
    ADD CONSTRAINT level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_ethusd_b level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_b
    ADD CONSTRAINT level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201901 level3_02003b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201901
    ADD CONSTRAINT level3_02003b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201901 level3_02003b201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201901
    ADD CONSTRAINT level3_02003b201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201901 level3_02003b201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201901
    ADD CONSTRAINT level3_02003b201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201902 level3_02003b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201902
    ADD CONSTRAINT level3_02003b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201902 level3_02003b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201902
    ADD CONSTRAINT level3_02003b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201902 level3_02003b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201902
    ADD CONSTRAINT level3_02003b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201903 level3_02003b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201903
    ADD CONSTRAINT level3_02003b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201903 level3_02003b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201903
    ADD CONSTRAINT level3_02003b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201903 level3_02003b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201903
    ADD CONSTRAINT level3_02003b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201904 level3_02003b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201904
    ADD CONSTRAINT level3_02003b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201904 level3_02003b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201904
    ADD CONSTRAINT level3_02003b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201904 level3_02003b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201904
    ADD CONSTRAINT level3_02003b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201905 level3_02003b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201905
    ADD CONSTRAINT level3_02003b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201905 level3_02003b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201905
    ADD CONSTRAINT level3_02003b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201905 level3_02003b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201905
    ADD CONSTRAINT level3_02003b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201906 level3_02003b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201906
    ADD CONSTRAINT level3_02003b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201906 level3_02003b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201906
    ADD CONSTRAINT level3_02003b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201906 level3_02003b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201906
    ADD CONSTRAINT level3_02003b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201907 level3_02003b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201907
    ADD CONSTRAINT level3_02003b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201907 level3_02003b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201907
    ADD CONSTRAINT level3_02003b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201907 level3_02003b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201907
    ADD CONSTRAINT level3_02003b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201908 level3_02003b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201908
    ADD CONSTRAINT level3_02003b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201908 level3_02003b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201908
    ADD CONSTRAINT level3_02003b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201908 level3_02003b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201908
    ADD CONSTRAINT level3_02003b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201909 level3_02003b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201909
    ADD CONSTRAINT level3_02003b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201909 level3_02003b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201909
    ADD CONSTRAINT level3_02003b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201909 level3_02003b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201909
    ADD CONSTRAINT level3_02003b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201910 level3_02003b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201910
    ADD CONSTRAINT level3_02003b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201910 level3_02003b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201910
    ADD CONSTRAINT level3_02003b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003b201910 level3_02003b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201910
    ADD CONSTRAINT level3_02003b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_ethusd_s level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_ethusd_s
    ADD CONSTRAINT level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201901 level3_02003s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201901
    ADD CONSTRAINT level3_02003s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201901 level3_02003s201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201901
    ADD CONSTRAINT level3_02003s201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201901 level3_02003s201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201901
    ADD CONSTRAINT level3_02003s201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201902 level3_02003s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201902
    ADD CONSTRAINT level3_02003s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201902 level3_02003s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201902
    ADD CONSTRAINT level3_02003s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201902 level3_02003s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201902
    ADD CONSTRAINT level3_02003s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201903 level3_02003s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201903
    ADD CONSTRAINT level3_02003s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201903 level3_02003s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201903
    ADD CONSTRAINT level3_02003s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201903 level3_02003s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201903
    ADD CONSTRAINT level3_02003s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201904 level3_02003s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201904
    ADD CONSTRAINT level3_02003s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201904 level3_02003s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201904
    ADD CONSTRAINT level3_02003s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201904 level3_02003s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201904
    ADD CONSTRAINT level3_02003s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201905 level3_02003s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201905
    ADD CONSTRAINT level3_02003s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201905 level3_02003s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201905
    ADD CONSTRAINT level3_02003s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201905 level3_02003s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201905
    ADD CONSTRAINT level3_02003s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201906 level3_02003s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201906
    ADD CONSTRAINT level3_02003s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201906 level3_02003s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201906
    ADD CONSTRAINT level3_02003s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201906 level3_02003s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201906
    ADD CONSTRAINT level3_02003s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201907 level3_02003s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201907
    ADD CONSTRAINT level3_02003s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201907 level3_02003s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201907
    ADD CONSTRAINT level3_02003s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201907 level3_02003s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201907
    ADD CONSTRAINT level3_02003s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201908 level3_02003s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201908
    ADD CONSTRAINT level3_02003s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201908 level3_02003s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201908
    ADD CONSTRAINT level3_02003s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201908 level3_02003s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201908
    ADD CONSTRAINT level3_02003s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201909 level3_02003s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201909
    ADD CONSTRAINT level3_02003s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201909 level3_02003s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201909
    ADD CONSTRAINT level3_02003s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201909 level3_02003s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201909
    ADD CONSTRAINT level3_02003s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201910 level3_02003s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201910
    ADD CONSTRAINT level3_02003s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201910 level3_02003s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201910
    ADD CONSTRAINT level3_02003s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02003s201910 level3_02003s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201910
    ADD CONSTRAINT level3_02003s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_xrpusd level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd
    ADD CONSTRAINT level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_xrpusd_b level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_b
    ADD CONSTRAINT level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201901 level3_02004b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201901
    ADD CONSTRAINT level3_02004b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201901 level3_02004b201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201901
    ADD CONSTRAINT level3_02004b201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201901 level3_02004b201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201901
    ADD CONSTRAINT level3_02004b201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201902 level3_02004b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201902
    ADD CONSTRAINT level3_02004b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201902 level3_02004b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201902
    ADD CONSTRAINT level3_02004b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201902 level3_02004b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201902
    ADD CONSTRAINT level3_02004b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201903 level3_02004b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201903
    ADD CONSTRAINT level3_02004b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201903 level3_02004b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201903
    ADD CONSTRAINT level3_02004b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201903 level3_02004b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201903
    ADD CONSTRAINT level3_02004b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201904 level3_02004b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201904
    ADD CONSTRAINT level3_02004b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201904 level3_02004b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201904
    ADD CONSTRAINT level3_02004b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201904 level3_02004b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201904
    ADD CONSTRAINT level3_02004b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201905 level3_02004b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201905
    ADD CONSTRAINT level3_02004b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201905 level3_02004b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201905
    ADD CONSTRAINT level3_02004b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201905 level3_02004b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201905
    ADD CONSTRAINT level3_02004b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201906 level3_02004b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201906
    ADD CONSTRAINT level3_02004b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201906 level3_02004b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201906
    ADD CONSTRAINT level3_02004b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201906 level3_02004b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201906
    ADD CONSTRAINT level3_02004b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201907 level3_02004b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201907
    ADD CONSTRAINT level3_02004b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201907 level3_02004b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201907
    ADD CONSTRAINT level3_02004b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201907 level3_02004b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201907
    ADD CONSTRAINT level3_02004b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201908 level3_02004b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201908
    ADD CONSTRAINT level3_02004b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201908 level3_02004b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201908
    ADD CONSTRAINT level3_02004b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201908 level3_02004b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201908
    ADD CONSTRAINT level3_02004b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201909 level3_02004b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201909
    ADD CONSTRAINT level3_02004b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201909 level3_02004b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201909
    ADD CONSTRAINT level3_02004b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201909 level3_02004b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201909
    ADD CONSTRAINT level3_02004b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201910 level3_02004b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201910
    ADD CONSTRAINT level3_02004b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201910 level3_02004b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201910
    ADD CONSTRAINT level3_02004b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004b201910 level3_02004b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201910
    ADD CONSTRAINT level3_02004b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_xrpusd_s level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_xrpusd_s
    ADD CONSTRAINT level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201901 level3_02004s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201901
    ADD CONSTRAINT level3_02004s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201901 level3_02004s201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201901
    ADD CONSTRAINT level3_02004s201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201901 level3_02004s201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201901
    ADD CONSTRAINT level3_02004s201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201902 level3_02004s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201902
    ADD CONSTRAINT level3_02004s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201902 level3_02004s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201902
    ADD CONSTRAINT level3_02004s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201902 level3_02004s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201902
    ADD CONSTRAINT level3_02004s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201903 level3_02004s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201903
    ADD CONSTRAINT level3_02004s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201903 level3_02004s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201903
    ADD CONSTRAINT level3_02004s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201903 level3_02004s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201903
    ADD CONSTRAINT level3_02004s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201904 level3_02004s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201904
    ADD CONSTRAINT level3_02004s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201904 level3_02004s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201904
    ADD CONSTRAINT level3_02004s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201904 level3_02004s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201904
    ADD CONSTRAINT level3_02004s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201905 level3_02004s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201905
    ADD CONSTRAINT level3_02004s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201905 level3_02004s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201905
    ADD CONSTRAINT level3_02004s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201905 level3_02004s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201905
    ADD CONSTRAINT level3_02004s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201906 level3_02004s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201906
    ADD CONSTRAINT level3_02004s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201906 level3_02004s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201906
    ADD CONSTRAINT level3_02004s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201906 level3_02004s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201906
    ADD CONSTRAINT level3_02004s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201907 level3_02004s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201907
    ADD CONSTRAINT level3_02004s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201907 level3_02004s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201907
    ADD CONSTRAINT level3_02004s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201907 level3_02004s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201907
    ADD CONSTRAINT level3_02004s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201908 level3_02004s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201908
    ADD CONSTRAINT level3_02004s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201908 level3_02004s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201908
    ADD CONSTRAINT level3_02004s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201908 level3_02004s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201908
    ADD CONSTRAINT level3_02004s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201909 level3_02004s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201909
    ADD CONSTRAINT level3_02004s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201909 level3_02004s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201909
    ADD CONSTRAINT level3_02004s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201909 level3_02004s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201909
    ADD CONSTRAINT level3_02004s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201910 level3_02004s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201910
    ADD CONSTRAINT level3_02004s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201910 level3_02004s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201910
    ADD CONSTRAINT level3_02004s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02004s201910 level3_02004s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201910
    ADD CONSTRAINT level3_02004s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_bchusd level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd
    ADD CONSTRAINT level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_bchusd_b level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_b
    ADD CONSTRAINT level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201901 level3_02005b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201901
    ADD CONSTRAINT level3_02005b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201901 level3_02005b201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201901
    ADD CONSTRAINT level3_02005b201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201901 level3_02005b201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201901
    ADD CONSTRAINT level3_02005b201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201902 level3_02005b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201902
    ADD CONSTRAINT level3_02005b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201902 level3_02005b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201902
    ADD CONSTRAINT level3_02005b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201902 level3_02005b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201902
    ADD CONSTRAINT level3_02005b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201903 level3_02005b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201903
    ADD CONSTRAINT level3_02005b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201903 level3_02005b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201903
    ADD CONSTRAINT level3_02005b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201903 level3_02005b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201903
    ADD CONSTRAINT level3_02005b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201904 level3_02005b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201904
    ADD CONSTRAINT level3_02005b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201904 level3_02005b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201904
    ADD CONSTRAINT level3_02005b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201904 level3_02005b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201904
    ADD CONSTRAINT level3_02005b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201905 level3_02005b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201905
    ADD CONSTRAINT level3_02005b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201905 level3_02005b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201905
    ADD CONSTRAINT level3_02005b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201905 level3_02005b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201905
    ADD CONSTRAINT level3_02005b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201906 level3_02005b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201906
    ADD CONSTRAINT level3_02005b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201906 level3_02005b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201906
    ADD CONSTRAINT level3_02005b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201906 level3_02005b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201906
    ADD CONSTRAINT level3_02005b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201907 level3_02005b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201907
    ADD CONSTRAINT level3_02005b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201907 level3_02005b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201907
    ADD CONSTRAINT level3_02005b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201907 level3_02005b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201907
    ADD CONSTRAINT level3_02005b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201908 level3_02005b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201908
    ADD CONSTRAINT level3_02005b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201908 level3_02005b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201908
    ADD CONSTRAINT level3_02005b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201908 level3_02005b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201908
    ADD CONSTRAINT level3_02005b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201909 level3_02005b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201909
    ADD CONSTRAINT level3_02005b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201909 level3_02005b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201909
    ADD CONSTRAINT level3_02005b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201909 level3_02005b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201909
    ADD CONSTRAINT level3_02005b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201910 level3_02005b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201910
    ADD CONSTRAINT level3_02005b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201910 level3_02005b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201910
    ADD CONSTRAINT level3_02005b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005b201910 level3_02005b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201910
    ADD CONSTRAINT level3_02005b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_bchusd_s level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_bchusd_s
    ADD CONSTRAINT level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201901 level3_02005s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201901
    ADD CONSTRAINT level3_02005s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201901 level3_02005s201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201901
    ADD CONSTRAINT level3_02005s201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201901 level3_02005s201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201901
    ADD CONSTRAINT level3_02005s201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201902 level3_02005s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201902
    ADD CONSTRAINT level3_02005s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201902 level3_02005s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201902
    ADD CONSTRAINT level3_02005s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201902 level3_02005s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201902
    ADD CONSTRAINT level3_02005s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201903 level3_02005s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201903
    ADD CONSTRAINT level3_02005s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201903 level3_02005s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201903
    ADD CONSTRAINT level3_02005s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201903 level3_02005s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201903
    ADD CONSTRAINT level3_02005s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201904 level3_02005s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201904
    ADD CONSTRAINT level3_02005s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201904 level3_02005s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201904
    ADD CONSTRAINT level3_02005s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201904 level3_02005s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201904
    ADD CONSTRAINT level3_02005s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201905 level3_02005s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201905
    ADD CONSTRAINT level3_02005s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201905 level3_02005s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201905
    ADD CONSTRAINT level3_02005s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201905 level3_02005s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201905
    ADD CONSTRAINT level3_02005s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201906 level3_02005s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201906
    ADD CONSTRAINT level3_02005s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201906 level3_02005s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201906
    ADD CONSTRAINT level3_02005s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201906 level3_02005s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201906
    ADD CONSTRAINT level3_02005s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201907 level3_02005s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201907
    ADD CONSTRAINT level3_02005s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201907 level3_02005s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201907
    ADD CONSTRAINT level3_02005s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201907 level3_02005s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201907
    ADD CONSTRAINT level3_02005s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201908 level3_02005s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201908
    ADD CONSTRAINT level3_02005s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201908 level3_02005s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201908
    ADD CONSTRAINT level3_02005s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201908 level3_02005s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201908
    ADD CONSTRAINT level3_02005s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201909 level3_02005s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201909
    ADD CONSTRAINT level3_02005s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201909 level3_02005s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201909
    ADD CONSTRAINT level3_02005s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201909 level3_02005s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201909
    ADD CONSTRAINT level3_02005s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201910 level3_02005s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201910
    ADD CONSTRAINT level3_02005s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201910 level3_02005s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201910
    ADD CONSTRAINT level3_02005s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02005s201910 level3_02005s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201910
    ADD CONSTRAINT level3_02005s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_btceur level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur
    ADD CONSTRAINT level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_bitstamp_btceur_b level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_b
    ADD CONSTRAINT level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201901 level3_02006b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201901
    ADD CONSTRAINT level3_02006b201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201901 level3_02006b201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201901
    ADD CONSTRAINT level3_02006b201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201901 level3_02006b201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201901
    ADD CONSTRAINT level3_02006b201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201902 level3_02006b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201902
    ADD CONSTRAINT level3_02006b201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201902 level3_02006b201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201902
    ADD CONSTRAINT level3_02006b201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201902 level3_02006b201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201902
    ADD CONSTRAINT level3_02006b201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201903 level3_02006b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201903
    ADD CONSTRAINT level3_02006b201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201903 level3_02006b201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201903
    ADD CONSTRAINT level3_02006b201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201903 level3_02006b201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201903
    ADD CONSTRAINT level3_02006b201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201904 level3_02006b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201904
    ADD CONSTRAINT level3_02006b201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201904 level3_02006b201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201904
    ADD CONSTRAINT level3_02006b201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201904 level3_02006b201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201904
    ADD CONSTRAINT level3_02006b201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201905 level3_02006b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201905
    ADD CONSTRAINT level3_02006b201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201905 level3_02006b201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201905
    ADD CONSTRAINT level3_02006b201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201905 level3_02006b201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201905
    ADD CONSTRAINT level3_02006b201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201906 level3_02006b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201906
    ADD CONSTRAINT level3_02006b201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201906 level3_02006b201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201906
    ADD CONSTRAINT level3_02006b201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201906 level3_02006b201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201906
    ADD CONSTRAINT level3_02006b201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201907 level3_02006b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201907
    ADD CONSTRAINT level3_02006b201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201907 level3_02006b201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201907
    ADD CONSTRAINT level3_02006b201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201907 level3_02006b201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201907
    ADD CONSTRAINT level3_02006b201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201908 level3_02006b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201908
    ADD CONSTRAINT level3_02006b201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201908 level3_02006b201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201908
    ADD CONSTRAINT level3_02006b201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201908 level3_02006b201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201908
    ADD CONSTRAINT level3_02006b201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201909 level3_02006b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201909
    ADD CONSTRAINT level3_02006b201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201909 level3_02006b201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201909
    ADD CONSTRAINT level3_02006b201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201909 level3_02006b201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201909
    ADD CONSTRAINT level3_02006b201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201910 level3_02006b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201910
    ADD CONSTRAINT level3_02006b201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201910 level3_02006b201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201910
    ADD CONSTRAINT level3_02006b201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006b201910 level3_02006b201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201910
    ADD CONSTRAINT level3_02006b201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_bitstamp_btceur_s level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_bitstamp_btceur_s
    ADD CONSTRAINT level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201901 level3_02006s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201901
    ADD CONSTRAINT level3_02006s201901_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201901 level3_02006s201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201901
    ADD CONSTRAINT level3_02006s201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201901 level3_02006s201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201901
    ADD CONSTRAINT level3_02006s201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201902 level3_02006s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201902
    ADD CONSTRAINT level3_02006s201902_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201902 level3_02006s201902_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201902
    ADD CONSTRAINT level3_02006s201902_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201902 level3_02006s201902_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201902
    ADD CONSTRAINT level3_02006s201902_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201903 level3_02006s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201903
    ADD CONSTRAINT level3_02006s201903_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201903 level3_02006s201903_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201903
    ADD CONSTRAINT level3_02006s201903_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201903 level3_02006s201903_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201903
    ADD CONSTRAINT level3_02006s201903_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201904 level3_02006s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201904
    ADD CONSTRAINT level3_02006s201904_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201904 level3_02006s201904_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201904
    ADD CONSTRAINT level3_02006s201904_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201904 level3_02006s201904_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201904
    ADD CONSTRAINT level3_02006s201904_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201905 level3_02006s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201905
    ADD CONSTRAINT level3_02006s201905_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201905 level3_02006s201905_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201905
    ADD CONSTRAINT level3_02006s201905_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201905 level3_02006s201905_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201905
    ADD CONSTRAINT level3_02006s201905_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201906 level3_02006s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201906
    ADD CONSTRAINT level3_02006s201906_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201906 level3_02006s201906_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201906
    ADD CONSTRAINT level3_02006s201906_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201906 level3_02006s201906_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201906
    ADD CONSTRAINT level3_02006s201906_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201907 level3_02006s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201907
    ADD CONSTRAINT level3_02006s201907_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201907 level3_02006s201907_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201907
    ADD CONSTRAINT level3_02006s201907_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201907 level3_02006s201907_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201907
    ADD CONSTRAINT level3_02006s201907_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201908 level3_02006s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201908
    ADD CONSTRAINT level3_02006s201908_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201908 level3_02006s201908_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201908
    ADD CONSTRAINT level3_02006s201908_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201908 level3_02006s201908_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201908
    ADD CONSTRAINT level3_02006s201908_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201909 level3_02006s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201909
    ADD CONSTRAINT level3_02006s201909_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201909 level3_02006s201909_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201909
    ADD CONSTRAINT level3_02006s201909_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201909 level3_02006s201909_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201909
    ADD CONSTRAINT level3_02006s201909_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201910 level3_02006s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201910
    ADD CONSTRAINT level3_02006s201910_pair_id_side_microtimestamp_order_id_ev_key UNIQUE (pair_id, side, microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201910 level3_02006s201910_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201910
    ADD CONSTRAINT level3_02006s201910_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02006s201910 level3_02006s201910_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201910
    ADD CONSTRAINT level3_02006s201910_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201901 level3_02b001201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201901
    ADD CONSTRAINT level3_02b001201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);

ALTER TABLE obanalytics.level3_02001b201901 CLUSTER ON level3_02b001201901_pkey;


--
-- Name: level3_02001b201901 level3_02b001201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201901
    ADD CONSTRAINT level3_02b001201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201901 level3_02s001201901_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201901
    ADD CONSTRAINT level3_02s001201901_pkey PRIMARY KEY (microtimestamp, order_id, event_no);


--
-- Name: level3_02001s201901 level3_02s001201901_unique_next; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201901
    ADD CONSTRAINT level3_02s001201901_unique_next UNIQUE (next_microtimestamp, order_id, next_event_no) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_eras level3_eras_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_eras
    ADD CONSTRAINT level3_eras_pkey PRIMARY KEY (era, pair_id, exchange_id);


--
-- Name: matches_01001201902 matches_01001201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201902
    ADD CONSTRAINT matches_01001201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201903 matches_01001201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201903
    ADD CONSTRAINT matches_01001201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201904 matches_01001201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201904
    ADD CONSTRAINT matches_01001201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201905 matches_01001201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201905
    ADD CONSTRAINT matches_01001201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201906 matches_01001201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201906
    ADD CONSTRAINT matches_01001201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201907 matches_01001201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201907
    ADD CONSTRAINT matches_01001201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201908 matches_01001201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201908
    ADD CONSTRAINT matches_01001201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201909 matches_01001201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201909
    ADD CONSTRAINT matches_01001201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01001201910 matches_01001201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201910
    ADD CONSTRAINT matches_01001201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201902 matches_01002201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201902
    ADD CONSTRAINT matches_01002201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201903 matches_01002201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201903
    ADD CONSTRAINT matches_01002201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201904 matches_01002201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201904
    ADD CONSTRAINT matches_01002201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201905 matches_01002201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201905
    ADD CONSTRAINT matches_01002201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201906 matches_01002201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201906
    ADD CONSTRAINT matches_01002201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201907 matches_01002201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201907
    ADD CONSTRAINT matches_01002201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201908 matches_01002201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201908
    ADD CONSTRAINT matches_01002201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201909 matches_01002201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201909
    ADD CONSTRAINT matches_01002201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01002201910 matches_01002201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201910
    ADD CONSTRAINT matches_01002201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201902 matches_01003201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201902
    ADD CONSTRAINT matches_01003201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201903 matches_01003201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201903
    ADD CONSTRAINT matches_01003201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201904 matches_01003201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201904
    ADD CONSTRAINT matches_01003201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201905 matches_01003201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201905
    ADD CONSTRAINT matches_01003201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201906 matches_01003201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201906
    ADD CONSTRAINT matches_01003201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201907 matches_01003201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201907
    ADD CONSTRAINT matches_01003201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201908 matches_01003201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201908
    ADD CONSTRAINT matches_01003201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201909 matches_01003201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201909
    ADD CONSTRAINT matches_01003201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01003201910 matches_01003201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201910
    ADD CONSTRAINT matches_01003201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_01004201902 matches_01004201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01004201902
    ADD CONSTRAINT matches_01004201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201901 matches_02001201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201901
    ADD CONSTRAINT matches_02001201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201902 matches_02001201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201902
    ADD CONSTRAINT matches_02001201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201903 matches_02001201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201903
    ADD CONSTRAINT matches_02001201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201904 matches_02001201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201904
    ADD CONSTRAINT matches_02001201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201905 matches_02001201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201905
    ADD CONSTRAINT matches_02001201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201906 matches_02001201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201906
    ADD CONSTRAINT matches_02001201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201907 matches_02001201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201907
    ADD CONSTRAINT matches_02001201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201908 matches_02001201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201908
    ADD CONSTRAINT matches_02001201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201909 matches_02001201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201909
    ADD CONSTRAINT matches_02001201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02001201910 matches_02001201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201910
    ADD CONSTRAINT matches_02001201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201901 matches_02002201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201901
    ADD CONSTRAINT matches_02002201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201902 matches_02002201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201902
    ADD CONSTRAINT matches_02002201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201903 matches_02002201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201903
    ADD CONSTRAINT matches_02002201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201904 matches_02002201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201904
    ADD CONSTRAINT matches_02002201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201905 matches_02002201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201905
    ADD CONSTRAINT matches_02002201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201906 matches_02002201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201906
    ADD CONSTRAINT matches_02002201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201907 matches_02002201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201907
    ADD CONSTRAINT matches_02002201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201908 matches_02002201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201908
    ADD CONSTRAINT matches_02002201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201909 matches_02002201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201909
    ADD CONSTRAINT matches_02002201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02002201910 matches_02002201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201910
    ADD CONSTRAINT matches_02002201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201901 matches_02003201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201901
    ADD CONSTRAINT matches_02003201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201902 matches_02003201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201902
    ADD CONSTRAINT matches_02003201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201903 matches_02003201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201903
    ADD CONSTRAINT matches_02003201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201904 matches_02003201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201904
    ADD CONSTRAINT matches_02003201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201905 matches_02003201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201905
    ADD CONSTRAINT matches_02003201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201906 matches_02003201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201906
    ADD CONSTRAINT matches_02003201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201907 matches_02003201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201907
    ADD CONSTRAINT matches_02003201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201908 matches_02003201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201908
    ADD CONSTRAINT matches_02003201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201909 matches_02003201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201909
    ADD CONSTRAINT matches_02003201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02003201910 matches_02003201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201910
    ADD CONSTRAINT matches_02003201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201901 matches_02004201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201901
    ADD CONSTRAINT matches_02004201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201902 matches_02004201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201902
    ADD CONSTRAINT matches_02004201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201903 matches_02004201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201903
    ADD CONSTRAINT matches_02004201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201904 matches_02004201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201904
    ADD CONSTRAINT matches_02004201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201905 matches_02004201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201905
    ADD CONSTRAINT matches_02004201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201906 matches_02004201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201906
    ADD CONSTRAINT matches_02004201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201907 matches_02004201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201907
    ADD CONSTRAINT matches_02004201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201908 matches_02004201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201908
    ADD CONSTRAINT matches_02004201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201909 matches_02004201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201909
    ADD CONSTRAINT matches_02004201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02004201910 matches_02004201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201910
    ADD CONSTRAINT matches_02004201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201901 matches_02005201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201901
    ADD CONSTRAINT matches_02005201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201902 matches_02005201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201902
    ADD CONSTRAINT matches_02005201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201903 matches_02005201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201903
    ADD CONSTRAINT matches_02005201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201904 matches_02005201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201904
    ADD CONSTRAINT matches_02005201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201905 matches_02005201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201905
    ADD CONSTRAINT matches_02005201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201906 matches_02005201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201906
    ADD CONSTRAINT matches_02005201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201907 matches_02005201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201907
    ADD CONSTRAINT matches_02005201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201908 matches_02005201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201908
    ADD CONSTRAINT matches_02005201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201909 matches_02005201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201909
    ADD CONSTRAINT matches_02005201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02005201910 matches_02005201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201910
    ADD CONSTRAINT matches_02005201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201901 matches_02006201901_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201901
    ADD CONSTRAINT matches_02006201901_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201902 matches_02006201902_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201902
    ADD CONSTRAINT matches_02006201902_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201903 matches_02006201903_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201903
    ADD CONSTRAINT matches_02006201903_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201904 matches_02006201904_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201904
    ADD CONSTRAINT matches_02006201904_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201905 matches_02006201905_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201905
    ADD CONSTRAINT matches_02006201905_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201906 matches_02006201906_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201906
    ADD CONSTRAINT matches_02006201906_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201907 matches_02006201907_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201907
    ADD CONSTRAINT matches_02006201907_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201908 matches_02006201908_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201908
    ADD CONSTRAINT matches_02006201908_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201909 matches_02006201909_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201909
    ADD CONSTRAINT matches_02006201909_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: matches_02006201910 matches_02006201910_unique_order_ids_combination; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201910
    ADD CONSTRAINT matches_02006201910_unique_order_ids_combination UNIQUE (buy_order_id, sell_order_id);


--
-- Name: pairs pairs_pkey; Type: CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.pairs
    ADD CONSTRAINT pairs_pkey PRIMARY KEY (pair_id);


--
-- Name: level3_02001b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02001s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02001s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02002s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02002s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02003s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02003s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02004s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02004s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02005s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02005s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006b201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006b201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201901_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201901_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201902_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201902_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201903_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201903_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201904_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201904_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201905_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201905_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201906_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201906_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201907_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201907_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201908_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201908_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201909_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201909_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_02006s201910_pair_id_side_microtimestamp_order_id_ev_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key ATTACH PARTITION obanalytics.level3_02006s201910_pair_id_side_microtimestamp_order_id_ev_key;


--
-- Name: level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_bchusd_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_bchusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_bchusd_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_btceur_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btceur_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_btceur_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_btcusd_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_btcusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_btcusd_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_ethusd_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ethusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_ethusd_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_ltcusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_ltcusd_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd_b_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_pair_id_side_microtimestamp_order_id_event__key ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key;


--
-- Name: level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key; Type: INDEX ATTACH; Schema: obanalytics; Owner: 
--

ALTER INDEX obanalytics.level3_bitstamp_xrpusd_pair_id_side_microtimestamp_order_id_key ATTACH PARTITION obanalytics.level3_bitstamp_xrpusd_s_pair_id_side_microtimestamp_order__key;


--
-- Name: level3_01001b201902 level3_01001b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201902 level3_01001b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201903 level3_01001b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201903 level3_01001b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201904 level3_01001b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201904 level3_01001b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201905 level3_01001b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201905 level3_01001b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201906 level3_01001b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201906 level3_01001b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201907 level3_01001b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201907 level3_01001b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201908 level3_01001b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201908 level3_01001b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201909 level3_01001b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201909 level3_01001b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001b201910 level3_01001b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001b201910 level3_01001b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201902 level3_01001s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201902 level3_01001s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201903 level3_01001s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201903 level3_01001s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201904 level3_01001s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201904 level3_01001s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201905 level3_01001s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201905 level3_01001s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201906 level3_01001s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201906 level3_01001s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201907 level3_01001s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201907 level3_01001s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201908 level3_01001s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201908 level3_01001s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201909 level3_01001s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201909 level3_01001s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01001s201910 level3_01001s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01001s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01001s201910 level3_01001s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01001s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01001s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201902 level3_01002b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201902 level3_01002b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201903 level3_01002b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201903 level3_01002b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201904 level3_01002b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201904 level3_01002b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201905 level3_01002b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201905 level3_01002b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201906 level3_01002b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201906 level3_01002b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201907 level3_01002b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201907 level3_01002b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201908 level3_01002b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201908 level3_01002b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201909 level3_01002b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201909 level3_01002b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002b201910 level3_01002b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002b201910 level3_01002b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201902 level3_01002s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201902 level3_01002s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201903 level3_01002s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201903 level3_01002s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201904 level3_01002s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201904 level3_01002s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201905 level3_01002s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201905 level3_01002s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201906 level3_01002s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201906 level3_01002s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201907 level3_01002s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201907 level3_01002s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201908 level3_01002s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201908 level3_01002s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201909 level3_01002s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201909 level3_01002s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01002s201910 level3_01002s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01002s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01002s201910 level3_01002s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01002s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01002s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201902 level3_01003b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201902 level3_01003b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201903 level3_01003b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201903 level3_01003b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201904 level3_01003b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201904 level3_01003b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201905 level3_01003b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201905 level3_01003b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201906 level3_01003b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201906 level3_01003b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201907 level3_01003b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201907 level3_01003b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201908 level3_01003b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201908 level3_01003b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201909 level3_01003b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201909 level3_01003b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003b201910 level3_01003b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003b201910 level3_01003b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201902 level3_01003s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201902 level3_01003s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201903 level3_01003s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201903 level3_01003s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201904 level3_01003s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201904 level3_01003s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201905 level3_01003s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201905 level3_01003s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201906 level3_01003s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201906 level3_01003s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201907 level3_01003s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201907 level3_01003s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201908 level3_01003s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201908 level3_01003s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201909 level3_01003s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201909 level3_01003s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01003s201910 level3_01003s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01003s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01003s201910 level3_01003s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01003s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01003s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01004b201902 level3_01004b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01004b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01004b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01004b201902 level3_01004b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01004b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01004b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_01004s201902 level3_01004s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01004s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_01004s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_01004s201902 level3_01004s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_01004s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_01004s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201902 level3_02001b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201902 level3_02001b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201903 level3_02001b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201903 level3_02001b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201904 level3_02001b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201904 level3_02001b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201905 level3_02001b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201905 level3_02001b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201906 level3_02001b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201906 level3_02001b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201907 level3_02001b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201907 level3_02001b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201908 level3_02001b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201908 level3_02001b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201909 level3_02001b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201909 level3_02001b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001b201910 level3_02001b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001b201910 level3_02001b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201902 level3_02001s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201902 level3_02001s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201903 level3_02001s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201903 level3_02001s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201904 level3_02001s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201904 level3_02001s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201905 level3_02001s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201905 level3_02001s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201906 level3_02001s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201906 level3_02001s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201907 level3_02001s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201907 level3_02001s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201908 level3_02001s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201908 level3_02001s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201909 level3_02001s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201909 level3_02001s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02001s201910 level3_02001s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02001s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02001s201910 level3_02001s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02001s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02001s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201901 level3_02002b201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201901 level3_02002b201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201902 level3_02002b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201902 level3_02002b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201903 level3_02002b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201903 level3_02002b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201904 level3_02002b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201904 level3_02002b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201905 level3_02002b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201905 level3_02002b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201906 level3_02002b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201906 level3_02002b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201907 level3_02002b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201907 level3_02002b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201908 level3_02002b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201908 level3_02002b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201909 level3_02002b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201909 level3_02002b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002b201910 level3_02002b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002b201910 level3_02002b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201901 level3_02002s201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201901 level3_02002s201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201902 level3_02002s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201902 level3_02002s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201903 level3_02002s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201903 level3_02002s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201904 level3_02002s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201904 level3_02002s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201905 level3_02002s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201905 level3_02002s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201906 level3_02002s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201906 level3_02002s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201907 level3_02002s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201907 level3_02002s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201908 level3_02002s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201908 level3_02002s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201909 level3_02002s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201909 level3_02002s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02002s201910 level3_02002s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02002s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02002s201910 level3_02002s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02002s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02002s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201901 level3_02003b201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201901 level3_02003b201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201902 level3_02003b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201902 level3_02003b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201903 level3_02003b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201903 level3_02003b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201904 level3_02003b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201904 level3_02003b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201905 level3_02003b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201905 level3_02003b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201906 level3_02003b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201906 level3_02003b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201907 level3_02003b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201907 level3_02003b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201908 level3_02003b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201908 level3_02003b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201909 level3_02003b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201909 level3_02003b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003b201910 level3_02003b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003b201910 level3_02003b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201901 level3_02003s201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201901 level3_02003s201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201902 level3_02003s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201902 level3_02003s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201903 level3_02003s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201903 level3_02003s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201904 level3_02003s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201904 level3_02003s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201905 level3_02003s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201905 level3_02003s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201906 level3_02003s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201906 level3_02003s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201907 level3_02003s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201907 level3_02003s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201908 level3_02003s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201908 level3_02003s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201909 level3_02003s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201909 level3_02003s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02003s201910 level3_02003s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02003s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02003s201910 level3_02003s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02003s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02003s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201901 level3_02004b201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201901 level3_02004b201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201902 level3_02004b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201902 level3_02004b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201903 level3_02004b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201903 level3_02004b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201904 level3_02004b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201904 level3_02004b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201905 level3_02004b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201905 level3_02004b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201906 level3_02004b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201906 level3_02004b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201907 level3_02004b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201907 level3_02004b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201908 level3_02004b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201908 level3_02004b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201909 level3_02004b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201909 level3_02004b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004b201910 level3_02004b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004b201910 level3_02004b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201901 level3_02004s201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201901 level3_02004s201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201902 level3_02004s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201902 level3_02004s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201903 level3_02004s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201903 level3_02004s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201904 level3_02004s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201904 level3_02004s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201905 level3_02004s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201905 level3_02004s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201906 level3_02004s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201906 level3_02004s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201907 level3_02004s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201907 level3_02004s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201908 level3_02004s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201908 level3_02004s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201909 level3_02004s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201909 level3_02004s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02004s201910 level3_02004s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02004s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02004s201910 level3_02004s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02004s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02004s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201901 level3_02005b201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201901 level3_02005b201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201902 level3_02005b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201902 level3_02005b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201903 level3_02005b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201903 level3_02005b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201904 level3_02005b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201904 level3_02005b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201905 level3_02005b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201905 level3_02005b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201906 level3_02005b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201906 level3_02005b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201907 level3_02005b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201907 level3_02005b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201908 level3_02005b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201908 level3_02005b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201909 level3_02005b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201909 level3_02005b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005b201910 level3_02005b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005b201910 level3_02005b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201901 level3_02005s201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201901 level3_02005s201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201902 level3_02005s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201902 level3_02005s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201903 level3_02005s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201903 level3_02005s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201904 level3_02005s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201904 level3_02005s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201905 level3_02005s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201905 level3_02005s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201906 level3_02005s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201906 level3_02005s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201907 level3_02005s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201907 level3_02005s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201908 level3_02005s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201908 level3_02005s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201909 level3_02005s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201909 level3_02005s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02005s201910 level3_02005s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02005s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02005s201910 level3_02005s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02005s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02005s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201901 level3_02006b201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201901 level3_02006b201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201902 level3_02006b201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201902 level3_02006b201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201903 level3_02006b201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201903 level3_02006b201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201904 level3_02006b201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201904 level3_02006b201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201905 level3_02006b201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201905 level3_02006b201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201906 level3_02006b201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201906 level3_02006b201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201907 level3_02006b201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201907 level3_02006b201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201908 level3_02006b201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201908 level3_02006b201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201909 level3_02006b201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201909 level3_02006b201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006b201910 level3_02006b201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006b201910 level3_02006b201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006b201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006b201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201901 level3_02006s201901_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201901_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201901 level3_02006s201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201902 level3_02006s201902_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201902_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201902 level3_02006s201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201903 level3_02006s201903_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201903_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201903 level3_02006s201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201904 level3_02006s201904_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201904_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201904 level3_02006s201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201905 level3_02006s201905_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201905_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201905 level3_02006s201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201906 level3_02006s201906_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201906_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201906 level3_02006s201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201907 level3_02006s201907_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201907_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201907 level3_02006s201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201908 level3_02006s201908_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201908_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201908 level3_02006s201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201909 level3_02006s201909_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201909_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201909 level3_02006s201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level3_02006s201910 level3_02006s201910_ba_incorporate_new_event; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201910_ba_incorporate_new_event BEFORE INSERT ON obanalytics.level3_02006s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.level3_incorporate_new_event();


--
-- Name: level3_02006s201910 level3_02006s201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER level3_02006s201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.level3_02006s201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201902 matches_01001201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201903 matches_01001201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201904 matches_01001201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201905 matches_01001201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201906 matches_01001201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201907 matches_01001201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201908 matches_01001201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201909 matches_01001201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01001201910 matches_01001201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01001201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01001201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201902 matches_01002201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201903 matches_01002201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201904 matches_01002201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201905 matches_01002201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201906 matches_01002201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201907 matches_01002201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201908 matches_01002201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201909 matches_01002201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01002201910 matches_01002201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01002201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01002201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201902 matches_01003201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201903 matches_01003201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201904 matches_01003201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201905 matches_01003201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201906 matches_01003201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201907 matches_01003201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201908 matches_01003201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201909 matches_01003201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01003201910 matches_01003201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01003201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01003201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_01004201902 matches_01004201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_01004201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_01004201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201903 matches_02001201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201904 matches_02001201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201905 matches_02001201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201906 matches_02001201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201907 matches_02001201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201908 matches_02001201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201909 matches_02001201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02001201910 matches_02001201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02001201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02001201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201901 matches_02002201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201902 matches_02002201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201903 matches_02002201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201904 matches_02002201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201905 matches_02002201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201906 matches_02002201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201907 matches_02002201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201908 matches_02002201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201909 matches_02002201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02002201910 matches_02002201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02002201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02002201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201901 matches_02003201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201902 matches_02003201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201903 matches_02003201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201904 matches_02003201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201905 matches_02003201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201906 matches_02003201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201907 matches_02003201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201908 matches_02003201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201909 matches_02003201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02003201910 matches_02003201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02003201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02003201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201901 matches_02004201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201902 matches_02004201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201903 matches_02004201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201904 matches_02004201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201905 matches_02004201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201906 matches_02004201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201907 matches_02004201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201908 matches_02004201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201909 matches_02004201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02004201910 matches_02004201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02004201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02004201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201901 matches_02005201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201902 matches_02005201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201903 matches_02005201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201904 matches_02005201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201905 matches_02005201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201906 matches_02005201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201907 matches_02005201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201908 matches_02005201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201909 matches_02005201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02005201910 matches_02005201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02005201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02005201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201901 matches_02006201901_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201901_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201901 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201902 matches_02006201902_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201902_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201902 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201903 matches_02006201903_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201903_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201903 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201904 matches_02006201904_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201904_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201904 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201905 matches_02006201905_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201905_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201905 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201906 matches_02006201906_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201906_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201906 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201907 matches_02006201907_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201907_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201907 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201908 matches_02006201908_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201908_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201908 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201909 matches_02006201909_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201909_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201909 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: matches_02006201910 matches_02006201910_bz_save_exchange_microtimestamp; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER matches_02006201910_bz_save_exchange_microtimestamp BEFORE UPDATE OF microtimestamp ON obanalytics.matches_02006201910 FOR EACH ROW EXECUTE PROCEDURE obanalytics.save_exchange_microtimestamp();


--
-- Name: level1 update_level3_eras; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER update_level3_eras AFTER INSERT ON obanalytics.level1 REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT EXECUTE PROCEDURE obanalytics.level1_update_level3_eras();


--
-- Name: level2 update_level3_eras; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER update_level3_eras AFTER INSERT ON obanalytics.level2 REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT EXECUTE PROCEDURE obanalytics.level2_update_level3_eras();


--
-- Name: level3 update_level3_eras; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER update_level3_eras AFTER INSERT ON obanalytics.level3 REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT EXECUTE PROCEDURE obanalytics.level3_update_level3_eras();


--
-- Name: level3_bitstamp update_level3_eras; Type: TRIGGER; Schema: obanalytics; Owner: ob-analytics
--

CREATE TRIGGER update_level3_eras AFTER INSERT ON obanalytics.level3_bitstamp REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT EXECUTE PROCEDURE obanalytics.level3_update_level3_eras();


--
-- Name: level3_01001b201903 level3_01001b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201903
    ADD CONSTRAINT level3_01001b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201903 level3_01001b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201903
    ADD CONSTRAINT level3_01001b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201904 level3_01001b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201904
    ADD CONSTRAINT level3_01001b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201904 level3_01001b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201904
    ADD CONSTRAINT level3_01001b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201905 level3_01001b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201905
    ADD CONSTRAINT level3_01001b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201905 level3_01001b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201905
    ADD CONSTRAINT level3_01001b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201906 level3_01001b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201906
    ADD CONSTRAINT level3_01001b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201906 level3_01001b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201906
    ADD CONSTRAINT level3_01001b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201907 level3_01001b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201907
    ADD CONSTRAINT level3_01001b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201907 level3_01001b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201907
    ADD CONSTRAINT level3_01001b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201908 level3_01001b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201908
    ADD CONSTRAINT level3_01001b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201908 level3_01001b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201908
    ADD CONSTRAINT level3_01001b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201909 level3_01001b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201909
    ADD CONSTRAINT level3_01001b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201909 level3_01001b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201909
    ADD CONSTRAINT level3_01001b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201910 level3_01001b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201910
    ADD CONSTRAINT level3_01001b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201910 level3_01001b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201910
    ADD CONSTRAINT level3_01001b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201903 level3_01001s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201903
    ADD CONSTRAINT level3_01001s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201903 level3_01001s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201903
    ADD CONSTRAINT level3_01001s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201904 level3_01001s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201904
    ADD CONSTRAINT level3_01001s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201904 level3_01001s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201904
    ADD CONSTRAINT level3_01001s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201905 level3_01001s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201905
    ADD CONSTRAINT level3_01001s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201905 level3_01001s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201905
    ADD CONSTRAINT level3_01001s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201906 level3_01001s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201906
    ADD CONSTRAINT level3_01001s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201906 level3_01001s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201906
    ADD CONSTRAINT level3_01001s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201907 level3_01001s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201907
    ADD CONSTRAINT level3_01001s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201907 level3_01001s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201907
    ADD CONSTRAINT level3_01001s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201908 level3_01001s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201908
    ADD CONSTRAINT level3_01001s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201908 level3_01001s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201908
    ADD CONSTRAINT level3_01001s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201909 level3_01001s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201909
    ADD CONSTRAINT level3_01001s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201909 level3_01001s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201909
    ADD CONSTRAINT level3_01001s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201910 level3_01001s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201910
    ADD CONSTRAINT level3_01001s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201910 level3_01001s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201910
    ADD CONSTRAINT level3_01001s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201903 level3_01002b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201903
    ADD CONSTRAINT level3_01002b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201903 level3_01002b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201903
    ADD CONSTRAINT level3_01002b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201904 level3_01002b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201904
    ADD CONSTRAINT level3_01002b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201904 level3_01002b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201904
    ADD CONSTRAINT level3_01002b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201905 level3_01002b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201905
    ADD CONSTRAINT level3_01002b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201905 level3_01002b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201905
    ADD CONSTRAINT level3_01002b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201906 level3_01002b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201906
    ADD CONSTRAINT level3_01002b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201906 level3_01002b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201906
    ADD CONSTRAINT level3_01002b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201907 level3_01002b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201907
    ADD CONSTRAINT level3_01002b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201907 level3_01002b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201907
    ADD CONSTRAINT level3_01002b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201908 level3_01002b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201908
    ADD CONSTRAINT level3_01002b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201908 level3_01002b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201908
    ADD CONSTRAINT level3_01002b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201909 level3_01002b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201909
    ADD CONSTRAINT level3_01002b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201909 level3_01002b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201909
    ADD CONSTRAINT level3_01002b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201910 level3_01002b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201910
    ADD CONSTRAINT level3_01002b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201910 level3_01002b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201910
    ADD CONSTRAINT level3_01002b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201903 level3_01002s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201903
    ADD CONSTRAINT level3_01002s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201903 level3_01002s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201903
    ADD CONSTRAINT level3_01002s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201904 level3_01002s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201904
    ADD CONSTRAINT level3_01002s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201904 level3_01002s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201904
    ADD CONSTRAINT level3_01002s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201905 level3_01002s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201905
    ADD CONSTRAINT level3_01002s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201905 level3_01002s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201905
    ADD CONSTRAINT level3_01002s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201906 level3_01002s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201906
    ADD CONSTRAINT level3_01002s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201906 level3_01002s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201906
    ADD CONSTRAINT level3_01002s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201907 level3_01002s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201907
    ADD CONSTRAINT level3_01002s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201907 level3_01002s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201907
    ADD CONSTRAINT level3_01002s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201908 level3_01002s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201908
    ADD CONSTRAINT level3_01002s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201908 level3_01002s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201908
    ADD CONSTRAINT level3_01002s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201909 level3_01002s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201909
    ADD CONSTRAINT level3_01002s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201909 level3_01002s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201909
    ADD CONSTRAINT level3_01002s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201910 level3_01002s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201910
    ADD CONSTRAINT level3_01002s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201910 level3_01002s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201910
    ADD CONSTRAINT level3_01002s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201903 level3_01003b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201903
    ADD CONSTRAINT level3_01003b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201903 level3_01003b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201903
    ADD CONSTRAINT level3_01003b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201904 level3_01003b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201904
    ADD CONSTRAINT level3_01003b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201904 level3_01003b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201904
    ADD CONSTRAINT level3_01003b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201905 level3_01003b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201905
    ADD CONSTRAINT level3_01003b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201905 level3_01003b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201905
    ADD CONSTRAINT level3_01003b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201906 level3_01003b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201906
    ADD CONSTRAINT level3_01003b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201906 level3_01003b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201906
    ADD CONSTRAINT level3_01003b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201907 level3_01003b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201907
    ADD CONSTRAINT level3_01003b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201907 level3_01003b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201907
    ADD CONSTRAINT level3_01003b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201908 level3_01003b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201908
    ADD CONSTRAINT level3_01003b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201908 level3_01003b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201908
    ADD CONSTRAINT level3_01003b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201909 level3_01003b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201909
    ADD CONSTRAINT level3_01003b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201909 level3_01003b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201909
    ADD CONSTRAINT level3_01003b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201910 level3_01003b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201910
    ADD CONSTRAINT level3_01003b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201910 level3_01003b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201910
    ADD CONSTRAINT level3_01003b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201903 level3_01003s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201903
    ADD CONSTRAINT level3_01003s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201903 level3_01003s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201903
    ADD CONSTRAINT level3_01003s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201904 level3_01003s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201904
    ADD CONSTRAINT level3_01003s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201904 level3_01003s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201904
    ADD CONSTRAINT level3_01003s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201905 level3_01003s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201905
    ADD CONSTRAINT level3_01003s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201905 level3_01003s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201905
    ADD CONSTRAINT level3_01003s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201906 level3_01003s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201906
    ADD CONSTRAINT level3_01003s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201906 level3_01003s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201906
    ADD CONSTRAINT level3_01003s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201907 level3_01003s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201907
    ADD CONSTRAINT level3_01003s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201907 level3_01003s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201907
    ADD CONSTRAINT level3_01003s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201908 level3_01003s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201908
    ADD CONSTRAINT level3_01003s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201908 level3_01003s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201908
    ADD CONSTRAINT level3_01003s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201909 level3_01003s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201909
    ADD CONSTRAINT level3_01003s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201909 level3_01003s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201909
    ADD CONSTRAINT level3_01003s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201910 level3_01003s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201910
    ADD CONSTRAINT level3_01003s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201910 level3_01003s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201910
    ADD CONSTRAINT level3_01003s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004b201902 level3_01004b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004b201902
    ADD CONSTRAINT level3_01004b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01004b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004b201902 level3_01004b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004b201902
    ADD CONSTRAINT level3_01004b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01004b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004s201902 level3_01004s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004s201902
    ADD CONSTRAINT level3_01004s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01004s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01004s201902 level3_01004s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01004s201902
    ADD CONSTRAINT level3_01004s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01004s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201902 level3_01b001201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201902
    ADD CONSTRAINT level3_01b001201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001b201902 level3_01b001201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001b201902
    ADD CONSTRAINT level3_01b001201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201902 level3_01b002201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201902
    ADD CONSTRAINT level3_01b002201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002b201902 level3_01b002201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002b201902
    ADD CONSTRAINT level3_01b002201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201902 level3_01b003201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201902
    ADD CONSTRAINT level3_01b003201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003b201902 level3_01b003201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003b201902
    ADD CONSTRAINT level3_01b003201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201902 level3_01s001201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201902
    ADD CONSTRAINT level3_01s001201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01001s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01001s201902 level3_01s001201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01001s201902
    ADD CONSTRAINT level3_01s001201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01001s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201902 level3_01s002201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201902
    ADD CONSTRAINT level3_01s002201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01002s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01002s201902 level3_01s002201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01002s201902
    ADD CONSTRAINT level3_01s002201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01002s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201902 level3_01s003201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201902
    ADD CONSTRAINT level3_01s003201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_01003s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_01003s201902 level3_01s003201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_01003s201902
    ADD CONSTRAINT level3_01s003201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_01003s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201902 level3_02001b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201902
    ADD CONSTRAINT level3_02001b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201902 level3_02001b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201902
    ADD CONSTRAINT level3_02001b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201903 level3_02001b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201903
    ADD CONSTRAINT level3_02001b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201903 level3_02001b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201903
    ADD CONSTRAINT level3_02001b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201904 level3_02001b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201904
    ADD CONSTRAINT level3_02001b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201904 level3_02001b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201904
    ADD CONSTRAINT level3_02001b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201905 level3_02001b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201905
    ADD CONSTRAINT level3_02001b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201905 level3_02001b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201905
    ADD CONSTRAINT level3_02001b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201906 level3_02001b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201906
    ADD CONSTRAINT level3_02001b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201906 level3_02001b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201906
    ADD CONSTRAINT level3_02001b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201907 level3_02001b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201907
    ADD CONSTRAINT level3_02001b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201907 level3_02001b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201907
    ADD CONSTRAINT level3_02001b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201908 level3_02001b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201908
    ADD CONSTRAINT level3_02001b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201908 level3_02001b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201908
    ADD CONSTRAINT level3_02001b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201909 level3_02001b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201909
    ADD CONSTRAINT level3_02001b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201909 level3_02001b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201909
    ADD CONSTRAINT level3_02001b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201910 level3_02001b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201910
    ADD CONSTRAINT level3_02001b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201910 level3_02001b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201910
    ADD CONSTRAINT level3_02001b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201902 level3_02001s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201902
    ADD CONSTRAINT level3_02001s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201902 level3_02001s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201902
    ADD CONSTRAINT level3_02001s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201903 level3_02001s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201903
    ADD CONSTRAINT level3_02001s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201903 level3_02001s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201903
    ADD CONSTRAINT level3_02001s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201904 level3_02001s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201904
    ADD CONSTRAINT level3_02001s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201904 level3_02001s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201904
    ADD CONSTRAINT level3_02001s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201905 level3_02001s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201905
    ADD CONSTRAINT level3_02001s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201905 level3_02001s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201905
    ADD CONSTRAINT level3_02001s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201906 level3_02001s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201906
    ADD CONSTRAINT level3_02001s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201906 level3_02001s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201906
    ADD CONSTRAINT level3_02001s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201907 level3_02001s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201907
    ADD CONSTRAINT level3_02001s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201907 level3_02001s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201907
    ADD CONSTRAINT level3_02001s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201908 level3_02001s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201908
    ADD CONSTRAINT level3_02001s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201908 level3_02001s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201908
    ADD CONSTRAINT level3_02001s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201909 level3_02001s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201909
    ADD CONSTRAINT level3_02001s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201909 level3_02001s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201909
    ADD CONSTRAINT level3_02001s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201910 level3_02001s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201910
    ADD CONSTRAINT level3_02001s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201910 level3_02001s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201910
    ADD CONSTRAINT level3_02001s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02001s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201901 level3_02002b201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201901
    ADD CONSTRAINT level3_02002b201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201901 level3_02002b201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201901
    ADD CONSTRAINT level3_02002b201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201902 level3_02002b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201902
    ADD CONSTRAINT level3_02002b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201902 level3_02002b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201902
    ADD CONSTRAINT level3_02002b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201903 level3_02002b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201903
    ADD CONSTRAINT level3_02002b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201903 level3_02002b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201903
    ADD CONSTRAINT level3_02002b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201904 level3_02002b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201904
    ADD CONSTRAINT level3_02002b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201904 level3_02002b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201904
    ADD CONSTRAINT level3_02002b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201905 level3_02002b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201905
    ADD CONSTRAINT level3_02002b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201905 level3_02002b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201905
    ADD CONSTRAINT level3_02002b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201906 level3_02002b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201906
    ADD CONSTRAINT level3_02002b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201906 level3_02002b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201906
    ADD CONSTRAINT level3_02002b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201907 level3_02002b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201907
    ADD CONSTRAINT level3_02002b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201907 level3_02002b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201907
    ADD CONSTRAINT level3_02002b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201908 level3_02002b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201908
    ADD CONSTRAINT level3_02002b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201908 level3_02002b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201908
    ADD CONSTRAINT level3_02002b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201909 level3_02002b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201909
    ADD CONSTRAINT level3_02002b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201909 level3_02002b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201909
    ADD CONSTRAINT level3_02002b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201910 level3_02002b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201910
    ADD CONSTRAINT level3_02002b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002b201910 level3_02002b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002b201910
    ADD CONSTRAINT level3_02002b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201901 level3_02002s201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201901
    ADD CONSTRAINT level3_02002s201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201901 level3_02002s201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201901
    ADD CONSTRAINT level3_02002s201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201902 level3_02002s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201902
    ADD CONSTRAINT level3_02002s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201902 level3_02002s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201902
    ADD CONSTRAINT level3_02002s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201903 level3_02002s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201903
    ADD CONSTRAINT level3_02002s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201903 level3_02002s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201903
    ADD CONSTRAINT level3_02002s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201904 level3_02002s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201904
    ADD CONSTRAINT level3_02002s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201904 level3_02002s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201904
    ADD CONSTRAINT level3_02002s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201905 level3_02002s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201905
    ADD CONSTRAINT level3_02002s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201905 level3_02002s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201905
    ADD CONSTRAINT level3_02002s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201906 level3_02002s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201906
    ADD CONSTRAINT level3_02002s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201906 level3_02002s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201906
    ADD CONSTRAINT level3_02002s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201907 level3_02002s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201907
    ADD CONSTRAINT level3_02002s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201907 level3_02002s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201907
    ADD CONSTRAINT level3_02002s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201908 level3_02002s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201908
    ADD CONSTRAINT level3_02002s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201908 level3_02002s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201908
    ADD CONSTRAINT level3_02002s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201909 level3_02002s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201909
    ADD CONSTRAINT level3_02002s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201909 level3_02002s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201909
    ADD CONSTRAINT level3_02002s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201910 level3_02002s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201910
    ADD CONSTRAINT level3_02002s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02002s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02002s201910 level3_02002s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02002s201910
    ADD CONSTRAINT level3_02002s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02002s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201901 level3_02003b201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201901
    ADD CONSTRAINT level3_02003b201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201901 level3_02003b201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201901
    ADD CONSTRAINT level3_02003b201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201902 level3_02003b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201902
    ADD CONSTRAINT level3_02003b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201902 level3_02003b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201902
    ADD CONSTRAINT level3_02003b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201903 level3_02003b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201903
    ADD CONSTRAINT level3_02003b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201903 level3_02003b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201903
    ADD CONSTRAINT level3_02003b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201904 level3_02003b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201904
    ADD CONSTRAINT level3_02003b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201904 level3_02003b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201904
    ADD CONSTRAINT level3_02003b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201905 level3_02003b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201905
    ADD CONSTRAINT level3_02003b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201905 level3_02003b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201905
    ADD CONSTRAINT level3_02003b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201906 level3_02003b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201906
    ADD CONSTRAINT level3_02003b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201906 level3_02003b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201906
    ADD CONSTRAINT level3_02003b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201907 level3_02003b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201907
    ADD CONSTRAINT level3_02003b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201907 level3_02003b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201907
    ADD CONSTRAINT level3_02003b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201908 level3_02003b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201908
    ADD CONSTRAINT level3_02003b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201908 level3_02003b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201908
    ADD CONSTRAINT level3_02003b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201909 level3_02003b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201909
    ADD CONSTRAINT level3_02003b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201909 level3_02003b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201909
    ADD CONSTRAINT level3_02003b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201910 level3_02003b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201910
    ADD CONSTRAINT level3_02003b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003b201910 level3_02003b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003b201910
    ADD CONSTRAINT level3_02003b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201901 level3_02003s201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201901
    ADD CONSTRAINT level3_02003s201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201901 level3_02003s201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201901
    ADD CONSTRAINT level3_02003s201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201902 level3_02003s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201902
    ADD CONSTRAINT level3_02003s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201902 level3_02003s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201902
    ADD CONSTRAINT level3_02003s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201903 level3_02003s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201903
    ADD CONSTRAINT level3_02003s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201903 level3_02003s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201903
    ADD CONSTRAINT level3_02003s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201904 level3_02003s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201904
    ADD CONSTRAINT level3_02003s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201904 level3_02003s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201904
    ADD CONSTRAINT level3_02003s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201905 level3_02003s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201905
    ADD CONSTRAINT level3_02003s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201905 level3_02003s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201905
    ADD CONSTRAINT level3_02003s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201906 level3_02003s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201906
    ADD CONSTRAINT level3_02003s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201906 level3_02003s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201906
    ADD CONSTRAINT level3_02003s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201907 level3_02003s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201907
    ADD CONSTRAINT level3_02003s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201907 level3_02003s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201907
    ADD CONSTRAINT level3_02003s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201908 level3_02003s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201908
    ADD CONSTRAINT level3_02003s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201908 level3_02003s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201908
    ADD CONSTRAINT level3_02003s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201909 level3_02003s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201909
    ADD CONSTRAINT level3_02003s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201909 level3_02003s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201909
    ADD CONSTRAINT level3_02003s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201910 level3_02003s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201910
    ADD CONSTRAINT level3_02003s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02003s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02003s201910 level3_02003s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02003s201910
    ADD CONSTRAINT level3_02003s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02003s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201901 level3_02004b201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201901
    ADD CONSTRAINT level3_02004b201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201901 level3_02004b201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201901
    ADD CONSTRAINT level3_02004b201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201902 level3_02004b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201902
    ADD CONSTRAINT level3_02004b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201902 level3_02004b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201902
    ADD CONSTRAINT level3_02004b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201903 level3_02004b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201903
    ADD CONSTRAINT level3_02004b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201903 level3_02004b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201903
    ADD CONSTRAINT level3_02004b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201904 level3_02004b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201904
    ADD CONSTRAINT level3_02004b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201904 level3_02004b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201904
    ADD CONSTRAINT level3_02004b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201905 level3_02004b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201905
    ADD CONSTRAINT level3_02004b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201905 level3_02004b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201905
    ADD CONSTRAINT level3_02004b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201906 level3_02004b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201906
    ADD CONSTRAINT level3_02004b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201906 level3_02004b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201906
    ADD CONSTRAINT level3_02004b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201907 level3_02004b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201907
    ADD CONSTRAINT level3_02004b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201907 level3_02004b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201907
    ADD CONSTRAINT level3_02004b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201908 level3_02004b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201908
    ADD CONSTRAINT level3_02004b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201908 level3_02004b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201908
    ADD CONSTRAINT level3_02004b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201909 level3_02004b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201909
    ADD CONSTRAINT level3_02004b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201909 level3_02004b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201909
    ADD CONSTRAINT level3_02004b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201910 level3_02004b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201910
    ADD CONSTRAINT level3_02004b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004b201910 level3_02004b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004b201910
    ADD CONSTRAINT level3_02004b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201901 level3_02004s201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201901
    ADD CONSTRAINT level3_02004s201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201901 level3_02004s201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201901
    ADD CONSTRAINT level3_02004s201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201902 level3_02004s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201902
    ADD CONSTRAINT level3_02004s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201902 level3_02004s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201902
    ADD CONSTRAINT level3_02004s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201903 level3_02004s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201903
    ADD CONSTRAINT level3_02004s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201903 level3_02004s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201903
    ADD CONSTRAINT level3_02004s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201904 level3_02004s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201904
    ADD CONSTRAINT level3_02004s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201904 level3_02004s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201904
    ADD CONSTRAINT level3_02004s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201905 level3_02004s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201905
    ADD CONSTRAINT level3_02004s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201905 level3_02004s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201905
    ADD CONSTRAINT level3_02004s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201906 level3_02004s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201906
    ADD CONSTRAINT level3_02004s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201906 level3_02004s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201906
    ADD CONSTRAINT level3_02004s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201907 level3_02004s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201907
    ADD CONSTRAINT level3_02004s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201907 level3_02004s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201907
    ADD CONSTRAINT level3_02004s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201908 level3_02004s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201908
    ADD CONSTRAINT level3_02004s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201908 level3_02004s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201908
    ADD CONSTRAINT level3_02004s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201909 level3_02004s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201909
    ADD CONSTRAINT level3_02004s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201909 level3_02004s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201909
    ADD CONSTRAINT level3_02004s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201910 level3_02004s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201910
    ADD CONSTRAINT level3_02004s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02004s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02004s201910 level3_02004s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02004s201910
    ADD CONSTRAINT level3_02004s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02004s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201901 level3_02005b201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201901
    ADD CONSTRAINT level3_02005b201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201901 level3_02005b201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201901
    ADD CONSTRAINT level3_02005b201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201902 level3_02005b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201902
    ADD CONSTRAINT level3_02005b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201902 level3_02005b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201902
    ADD CONSTRAINT level3_02005b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201903 level3_02005b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201903
    ADD CONSTRAINT level3_02005b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201903 level3_02005b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201903
    ADD CONSTRAINT level3_02005b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201904 level3_02005b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201904
    ADD CONSTRAINT level3_02005b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201904 level3_02005b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201904
    ADD CONSTRAINT level3_02005b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201905 level3_02005b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201905
    ADD CONSTRAINT level3_02005b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201905 level3_02005b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201905
    ADD CONSTRAINT level3_02005b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201906 level3_02005b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201906
    ADD CONSTRAINT level3_02005b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201906 level3_02005b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201906
    ADD CONSTRAINT level3_02005b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201907 level3_02005b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201907
    ADD CONSTRAINT level3_02005b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201907 level3_02005b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201907
    ADD CONSTRAINT level3_02005b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201908 level3_02005b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201908
    ADD CONSTRAINT level3_02005b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201908 level3_02005b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201908
    ADD CONSTRAINT level3_02005b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201909 level3_02005b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201909
    ADD CONSTRAINT level3_02005b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201909 level3_02005b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201909
    ADD CONSTRAINT level3_02005b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201910 level3_02005b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201910
    ADD CONSTRAINT level3_02005b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005b201910 level3_02005b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005b201910
    ADD CONSTRAINT level3_02005b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201901 level3_02005s201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201901
    ADD CONSTRAINT level3_02005s201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201901 level3_02005s201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201901
    ADD CONSTRAINT level3_02005s201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201902 level3_02005s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201902
    ADD CONSTRAINT level3_02005s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201902 level3_02005s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201902
    ADD CONSTRAINT level3_02005s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201903 level3_02005s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201903
    ADD CONSTRAINT level3_02005s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201903 level3_02005s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201903
    ADD CONSTRAINT level3_02005s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201904 level3_02005s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201904
    ADD CONSTRAINT level3_02005s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201904 level3_02005s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201904
    ADD CONSTRAINT level3_02005s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201905 level3_02005s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201905
    ADD CONSTRAINT level3_02005s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201905 level3_02005s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201905
    ADD CONSTRAINT level3_02005s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201906 level3_02005s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201906
    ADD CONSTRAINT level3_02005s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201906 level3_02005s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201906
    ADD CONSTRAINT level3_02005s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201907 level3_02005s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201907
    ADD CONSTRAINT level3_02005s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201907 level3_02005s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201907
    ADD CONSTRAINT level3_02005s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201908 level3_02005s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201908
    ADD CONSTRAINT level3_02005s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201908 level3_02005s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201908
    ADD CONSTRAINT level3_02005s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201909 level3_02005s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201909
    ADD CONSTRAINT level3_02005s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201909 level3_02005s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201909
    ADD CONSTRAINT level3_02005s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201910 level3_02005s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201910
    ADD CONSTRAINT level3_02005s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02005s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02005s201910 level3_02005s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02005s201910
    ADD CONSTRAINT level3_02005s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02005s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201901 level3_02006b201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201901
    ADD CONSTRAINT level3_02006b201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201901 level3_02006b201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201901
    ADD CONSTRAINT level3_02006b201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201902 level3_02006b201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201902
    ADD CONSTRAINT level3_02006b201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201902 level3_02006b201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201902
    ADD CONSTRAINT level3_02006b201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201903 level3_02006b201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201903
    ADD CONSTRAINT level3_02006b201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201903 level3_02006b201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201903
    ADD CONSTRAINT level3_02006b201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201904 level3_02006b201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201904
    ADD CONSTRAINT level3_02006b201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201904 level3_02006b201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201904
    ADD CONSTRAINT level3_02006b201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201905 level3_02006b201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201905
    ADD CONSTRAINT level3_02006b201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201905 level3_02006b201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201905
    ADD CONSTRAINT level3_02006b201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201906 level3_02006b201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201906
    ADD CONSTRAINT level3_02006b201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201906 level3_02006b201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201906
    ADD CONSTRAINT level3_02006b201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201907 level3_02006b201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201907
    ADD CONSTRAINT level3_02006b201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201907 level3_02006b201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201907
    ADD CONSTRAINT level3_02006b201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201908 level3_02006b201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201908
    ADD CONSTRAINT level3_02006b201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201908 level3_02006b201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201908
    ADD CONSTRAINT level3_02006b201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201909 level3_02006b201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201909
    ADD CONSTRAINT level3_02006b201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201909 level3_02006b201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201909
    ADD CONSTRAINT level3_02006b201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201910 level3_02006b201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201910
    ADD CONSTRAINT level3_02006b201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006b201910 level3_02006b201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006b201910
    ADD CONSTRAINT level3_02006b201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006b201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201901 level3_02006s201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201901
    ADD CONSTRAINT level3_02006s201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201901 level3_02006s201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201901
    ADD CONSTRAINT level3_02006s201901_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201902 level3_02006s201902_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201902
    ADD CONSTRAINT level3_02006s201902_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201902 level3_02006s201902_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201902
    ADD CONSTRAINT level3_02006s201902_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201902(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201903 level3_02006s201903_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201903
    ADD CONSTRAINT level3_02006s201903_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201903 level3_02006s201903_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201903
    ADD CONSTRAINT level3_02006s201903_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201903(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201904 level3_02006s201904_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201904
    ADD CONSTRAINT level3_02006s201904_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201904 level3_02006s201904_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201904
    ADD CONSTRAINT level3_02006s201904_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201904(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201905 level3_02006s201905_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201905
    ADD CONSTRAINT level3_02006s201905_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201905 level3_02006s201905_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201905
    ADD CONSTRAINT level3_02006s201905_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201905(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201906 level3_02006s201906_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201906
    ADD CONSTRAINT level3_02006s201906_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201906 level3_02006s201906_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201906
    ADD CONSTRAINT level3_02006s201906_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201906(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201907 level3_02006s201907_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201907
    ADD CONSTRAINT level3_02006s201907_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201907 level3_02006s201907_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201907
    ADD CONSTRAINT level3_02006s201907_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201907(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201908 level3_02006s201908_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201908
    ADD CONSTRAINT level3_02006s201908_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201908 level3_02006s201908_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201908
    ADD CONSTRAINT level3_02006s201908_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201908(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201909 level3_02006s201909_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201909
    ADD CONSTRAINT level3_02006s201909_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201909 level3_02006s201909_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201909
    ADD CONSTRAINT level3_02006s201909_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201909(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201910 level3_02006s201910_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201910
    ADD CONSTRAINT level3_02006s201910_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02006s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02006s201910 level3_02006s201910_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02006s201910
    ADD CONSTRAINT level3_02006s201910_fkey_level3_price FOREIGN KEY (price_microtimestamp, order_id, price_event_no) REFERENCES obanalytics.level3_02006s201910(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201901 level3_02b001201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201901
    ADD CONSTRAINT level3_02b001201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001b201901 level3_02b001201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001b201901
    ADD CONSTRAINT level3_02b001201901_fkey_level3_price FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001b201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201901 level3_02s001201901_fkey_level3_next; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201901
    ADD CONSTRAINT level3_02s001201901_fkey_level3_next FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3_02001s201901 level3_02s001201901_fkey_level3_price; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.level3_02001s201901
    ADD CONSTRAINT level3_02s001201901_fkey_level3_price FOREIGN KEY (next_microtimestamp, order_id, next_event_no) REFERENCES obanalytics.level3_02001s201901(microtimestamp, order_id, event_no) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3 level3_fkey_exchange_id; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE obanalytics.level3
    ADD CONSTRAINT level3_fkey_exchange_id FOREIGN KEY (exchange_id) REFERENCES obanalytics.exchanges(exchange_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: level3 level3_fkey_pair_id; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE obanalytics.level3
    ADD CONSTRAINT level3_fkey_pair_id FOREIGN KEY (pair_id) REFERENCES obanalytics.pairs(pair_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches live_trades_fkey_exchange_id; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE obanalytics.matches
    ADD CONSTRAINT live_trades_fkey_exchange_id FOREIGN KEY (exchange_id) REFERENCES obanalytics.exchanges(exchange_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches live_trades_fkey_pair_id; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE obanalytics.matches
    ADD CONSTRAINT live_trades_fkey_pair_id FOREIGN KEY (pair_id) REFERENCES obanalytics.pairs(pair_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201902 matches_01001201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201902
    ADD CONSTRAINT matches_01001201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201902 matches_01001201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201902
    ADD CONSTRAINT matches_01001201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201903 matches_01001201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201903
    ADD CONSTRAINT matches_01001201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201903 matches_01001201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201903
    ADD CONSTRAINT matches_01001201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201904 matches_01001201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201904
    ADD CONSTRAINT matches_01001201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201904 matches_01001201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201904
    ADD CONSTRAINT matches_01001201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201905 matches_01001201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201905
    ADD CONSTRAINT matches_01001201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201905 matches_01001201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201905
    ADD CONSTRAINT matches_01001201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201906 matches_01001201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201906
    ADD CONSTRAINT matches_01001201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201906 matches_01001201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201906
    ADD CONSTRAINT matches_01001201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201907 matches_01001201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201907
    ADD CONSTRAINT matches_01001201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201907 matches_01001201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201907
    ADD CONSTRAINT matches_01001201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201908 matches_01001201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201908
    ADD CONSTRAINT matches_01001201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201908 matches_01001201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201908
    ADD CONSTRAINT matches_01001201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201909 matches_01001201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201909
    ADD CONSTRAINT matches_01001201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201909 matches_01001201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201909
    ADD CONSTRAINT matches_01001201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201910 matches_01001201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201910
    ADD CONSTRAINT matches_01001201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01001b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01001201910 matches_01001201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01001201910
    ADD CONSTRAINT matches_01001201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01001s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201902 matches_01002201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201902
    ADD CONSTRAINT matches_01002201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201902 matches_01002201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201902
    ADD CONSTRAINT matches_01002201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201903 matches_01002201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201903
    ADD CONSTRAINT matches_01002201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201903 matches_01002201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201903
    ADD CONSTRAINT matches_01002201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201904 matches_01002201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201904
    ADD CONSTRAINT matches_01002201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201904 matches_01002201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201904
    ADD CONSTRAINT matches_01002201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201905 matches_01002201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201905
    ADD CONSTRAINT matches_01002201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201905 matches_01002201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201905
    ADD CONSTRAINT matches_01002201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201906 matches_01002201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201906
    ADD CONSTRAINT matches_01002201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201906 matches_01002201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201906
    ADD CONSTRAINT matches_01002201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201907 matches_01002201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201907
    ADD CONSTRAINT matches_01002201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201907 matches_01002201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201907
    ADD CONSTRAINT matches_01002201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201908 matches_01002201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201908
    ADD CONSTRAINT matches_01002201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201908 matches_01002201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201908
    ADD CONSTRAINT matches_01002201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201909 matches_01002201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201909
    ADD CONSTRAINT matches_01002201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201909 matches_01002201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201909
    ADD CONSTRAINT matches_01002201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201910 matches_01002201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201910
    ADD CONSTRAINT matches_01002201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01002b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01002201910 matches_01002201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01002201910
    ADD CONSTRAINT matches_01002201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01002s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201902 matches_01003201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201902
    ADD CONSTRAINT matches_01003201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201902 matches_01003201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201902
    ADD CONSTRAINT matches_01003201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201903 matches_01003201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201903
    ADD CONSTRAINT matches_01003201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201903 matches_01003201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201903
    ADD CONSTRAINT matches_01003201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201904 matches_01003201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201904
    ADD CONSTRAINT matches_01003201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201904 matches_01003201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201904
    ADD CONSTRAINT matches_01003201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201905 matches_01003201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201905
    ADD CONSTRAINT matches_01003201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201905 matches_01003201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201905
    ADD CONSTRAINT matches_01003201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201906 matches_01003201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201906
    ADD CONSTRAINT matches_01003201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201906 matches_01003201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201906
    ADD CONSTRAINT matches_01003201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201907 matches_01003201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201907
    ADD CONSTRAINT matches_01003201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201907 matches_01003201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201907
    ADD CONSTRAINT matches_01003201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201908 matches_01003201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201908
    ADD CONSTRAINT matches_01003201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201908 matches_01003201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201908
    ADD CONSTRAINT matches_01003201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201909 matches_01003201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201909
    ADD CONSTRAINT matches_01003201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201909 matches_01003201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201909
    ADD CONSTRAINT matches_01003201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201910 matches_01003201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201910
    ADD CONSTRAINT matches_01003201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01003b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01003201910 matches_01003201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01003201910
    ADD CONSTRAINT matches_01003201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01003s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01004201902 matches_01004201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01004201902
    ADD CONSTRAINT matches_01004201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_01004b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_01004201902 matches_01004201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_01004201902
    ADD CONSTRAINT matches_01004201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_01004s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201901 matches_02001201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201901
    ADD CONSTRAINT matches_02001201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201901 matches_02001201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201901
    ADD CONSTRAINT matches_02001201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201902 matches_02001201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201902
    ADD CONSTRAINT matches_02001201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201902 matches_02001201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201902
    ADD CONSTRAINT matches_02001201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201903 matches_02001201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201903
    ADD CONSTRAINT matches_02001201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201903 matches_02001201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201903
    ADD CONSTRAINT matches_02001201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201904 matches_02001201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201904
    ADD CONSTRAINT matches_02001201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201904 matches_02001201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201904
    ADD CONSTRAINT matches_02001201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201905 matches_02001201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201905
    ADD CONSTRAINT matches_02001201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201905 matches_02001201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201905
    ADD CONSTRAINT matches_02001201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201906 matches_02001201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201906
    ADD CONSTRAINT matches_02001201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201906 matches_02001201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201906
    ADD CONSTRAINT matches_02001201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201907 matches_02001201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201907
    ADD CONSTRAINT matches_02001201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201907 matches_02001201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201907
    ADD CONSTRAINT matches_02001201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201908 matches_02001201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201908
    ADD CONSTRAINT matches_02001201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201908 matches_02001201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201908
    ADD CONSTRAINT matches_02001201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201909 matches_02001201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201909
    ADD CONSTRAINT matches_02001201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201909 matches_02001201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201909
    ADD CONSTRAINT matches_02001201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201910 matches_02001201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201910
    ADD CONSTRAINT matches_02001201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02001b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02001201910 matches_02001201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02001201910
    ADD CONSTRAINT matches_02001201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02001s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201901 matches_02002201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201901
    ADD CONSTRAINT matches_02002201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201901 matches_02002201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201901
    ADD CONSTRAINT matches_02002201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201902 matches_02002201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201902
    ADD CONSTRAINT matches_02002201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201902 matches_02002201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201902
    ADD CONSTRAINT matches_02002201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201903 matches_02002201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201903
    ADD CONSTRAINT matches_02002201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201903 matches_02002201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201903
    ADD CONSTRAINT matches_02002201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201904 matches_02002201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201904
    ADD CONSTRAINT matches_02002201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201904 matches_02002201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201904
    ADD CONSTRAINT matches_02002201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201905 matches_02002201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201905
    ADD CONSTRAINT matches_02002201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201905 matches_02002201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201905
    ADD CONSTRAINT matches_02002201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201906 matches_02002201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201906
    ADD CONSTRAINT matches_02002201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201906 matches_02002201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201906
    ADD CONSTRAINT matches_02002201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201907 matches_02002201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201907
    ADD CONSTRAINT matches_02002201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201907 matches_02002201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201907
    ADD CONSTRAINT matches_02002201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201908 matches_02002201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201908
    ADD CONSTRAINT matches_02002201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201908 matches_02002201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201908
    ADD CONSTRAINT matches_02002201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201909 matches_02002201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201909
    ADD CONSTRAINT matches_02002201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201909 matches_02002201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201909
    ADD CONSTRAINT matches_02002201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201910 matches_02002201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201910
    ADD CONSTRAINT matches_02002201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02002b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02002201910 matches_02002201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02002201910
    ADD CONSTRAINT matches_02002201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02002s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201901 matches_02003201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201901
    ADD CONSTRAINT matches_02003201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201901 matches_02003201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201901
    ADD CONSTRAINT matches_02003201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201902 matches_02003201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201902
    ADD CONSTRAINT matches_02003201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201902 matches_02003201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201902
    ADD CONSTRAINT matches_02003201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201903 matches_02003201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201903
    ADD CONSTRAINT matches_02003201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201903 matches_02003201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201903
    ADD CONSTRAINT matches_02003201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201904 matches_02003201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201904
    ADD CONSTRAINT matches_02003201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201904 matches_02003201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201904
    ADD CONSTRAINT matches_02003201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201905 matches_02003201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201905
    ADD CONSTRAINT matches_02003201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201905 matches_02003201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201905
    ADD CONSTRAINT matches_02003201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201906 matches_02003201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201906
    ADD CONSTRAINT matches_02003201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201906 matches_02003201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201906
    ADD CONSTRAINT matches_02003201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201907 matches_02003201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201907
    ADD CONSTRAINT matches_02003201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201907 matches_02003201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201907
    ADD CONSTRAINT matches_02003201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201908 matches_02003201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201908
    ADD CONSTRAINT matches_02003201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201908 matches_02003201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201908
    ADD CONSTRAINT matches_02003201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201909 matches_02003201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201909
    ADD CONSTRAINT matches_02003201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201909 matches_02003201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201909
    ADD CONSTRAINT matches_02003201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201910 matches_02003201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201910
    ADD CONSTRAINT matches_02003201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02003b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02003201910 matches_02003201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02003201910
    ADD CONSTRAINT matches_02003201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02003s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201901 matches_02004201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201901
    ADD CONSTRAINT matches_02004201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201901 matches_02004201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201901
    ADD CONSTRAINT matches_02004201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201902 matches_02004201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201902
    ADD CONSTRAINT matches_02004201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201902 matches_02004201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201902
    ADD CONSTRAINT matches_02004201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201903 matches_02004201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201903
    ADD CONSTRAINT matches_02004201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201903 matches_02004201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201903
    ADD CONSTRAINT matches_02004201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201904 matches_02004201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201904
    ADD CONSTRAINT matches_02004201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201904 matches_02004201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201904
    ADD CONSTRAINT matches_02004201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201905 matches_02004201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201905
    ADD CONSTRAINT matches_02004201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201905 matches_02004201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201905
    ADD CONSTRAINT matches_02004201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201906 matches_02004201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201906
    ADD CONSTRAINT matches_02004201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201906 matches_02004201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201906
    ADD CONSTRAINT matches_02004201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201907 matches_02004201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201907
    ADD CONSTRAINT matches_02004201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201907 matches_02004201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201907
    ADD CONSTRAINT matches_02004201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201908 matches_02004201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201908
    ADD CONSTRAINT matches_02004201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201908 matches_02004201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201908
    ADD CONSTRAINT matches_02004201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201909 matches_02004201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201909
    ADD CONSTRAINT matches_02004201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201909 matches_02004201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201909
    ADD CONSTRAINT matches_02004201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201910 matches_02004201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201910
    ADD CONSTRAINT matches_02004201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02004b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02004201910 matches_02004201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02004201910
    ADD CONSTRAINT matches_02004201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02004s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201901 matches_02005201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201901
    ADD CONSTRAINT matches_02005201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201901 matches_02005201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201901
    ADD CONSTRAINT matches_02005201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201902 matches_02005201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201902
    ADD CONSTRAINT matches_02005201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201902 matches_02005201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201902
    ADD CONSTRAINT matches_02005201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201903 matches_02005201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201903
    ADD CONSTRAINT matches_02005201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201903 matches_02005201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201903
    ADD CONSTRAINT matches_02005201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201904 matches_02005201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201904
    ADD CONSTRAINT matches_02005201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201904 matches_02005201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201904
    ADD CONSTRAINT matches_02005201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201905 matches_02005201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201905
    ADD CONSTRAINT matches_02005201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201905 matches_02005201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201905
    ADD CONSTRAINT matches_02005201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201906 matches_02005201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201906
    ADD CONSTRAINT matches_02005201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201906 matches_02005201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201906
    ADD CONSTRAINT matches_02005201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201907 matches_02005201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201907
    ADD CONSTRAINT matches_02005201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201907 matches_02005201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201907
    ADD CONSTRAINT matches_02005201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201908 matches_02005201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201908
    ADD CONSTRAINT matches_02005201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201908 matches_02005201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201908
    ADD CONSTRAINT matches_02005201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201909 matches_02005201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201909
    ADD CONSTRAINT matches_02005201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201909 matches_02005201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201909
    ADD CONSTRAINT matches_02005201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201910 matches_02005201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201910
    ADD CONSTRAINT matches_02005201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02005b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02005201910 matches_02005201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02005201910
    ADD CONSTRAINT matches_02005201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02005s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201901 matches_02006201901_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201901
    ADD CONSTRAINT matches_02006201901_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201901 matches_02006201901_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201901
    ADD CONSTRAINT matches_02006201901_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201901(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201902 matches_02006201902_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201902
    ADD CONSTRAINT matches_02006201902_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201902 matches_02006201902_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201902
    ADD CONSTRAINT matches_02006201902_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201902(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201903 matches_02006201903_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201903
    ADD CONSTRAINT matches_02006201903_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201903 matches_02006201903_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201903
    ADD CONSTRAINT matches_02006201903_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201903(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201904 matches_02006201904_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201904
    ADD CONSTRAINT matches_02006201904_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201904 matches_02006201904_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201904
    ADD CONSTRAINT matches_02006201904_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201904(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201905 matches_02006201905_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201905
    ADD CONSTRAINT matches_02006201905_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201905 matches_02006201905_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201905
    ADD CONSTRAINT matches_02006201905_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201905(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201906 matches_02006201906_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201906
    ADD CONSTRAINT matches_02006201906_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201906 matches_02006201906_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201906
    ADD CONSTRAINT matches_02006201906_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201906(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201907 matches_02006201907_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201907
    ADD CONSTRAINT matches_02006201907_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201907 matches_02006201907_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201907
    ADD CONSTRAINT matches_02006201907_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201907(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201908 matches_02006201908_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201908
    ADD CONSTRAINT matches_02006201908_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201908 matches_02006201908_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201908
    ADD CONSTRAINT matches_02006201908_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201908(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201909 matches_02006201909_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201909
    ADD CONSTRAINT matches_02006201909_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201909 matches_02006201909_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201909
    ADD CONSTRAINT matches_02006201909_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201909(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201910 matches_02006201910_fkey_level3_buys; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201910
    ADD CONSTRAINT matches_02006201910_fkey_level3_buys FOREIGN KEY (buy_event_no, microtimestamp, buy_order_id) REFERENCES obanalytics.level3_02006b201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: matches_02006201910 matches_02006201910_fkey_level3_sells; Type: FK CONSTRAINT; Schema: obanalytics; Owner: ob-analytics
--

ALTER TABLE ONLY obanalytics.matches_02006201910
    ADD CONSTRAINT matches_02006201910_fkey_level3_sells FOREIGN KEY (sell_event_no, microtimestamp, sell_order_id) REFERENCES obanalytics.level3_02006s201910(event_no, microtimestamp, order_id) ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: SCHEMA obanalytics; Type: ACL; Schema: -; Owner: ob-analytics
--

GRANT USAGE ON SCHEMA obanalytics TO obauser;


--
-- Name: TABLE exchanges; Type: ACL; Schema: obanalytics; Owner: ob-analytics
--

GRANT SELECT ON TABLE obanalytics.exchanges TO obauser;


--
-- Name: TABLE pairs; Type: ACL; Schema: obanalytics; Owner: ob-analytics
--

GRANT SELECT ON TABLE obanalytics.pairs TO obauser;


--
-- PostgreSQL database dump complete
--

